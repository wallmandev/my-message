{"ast":null,"code":"var _jsxFileName = \"/Users/christofferwallman/message-board/frontend/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\n// Ange din API-bas-URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiBaseUrl = 'https://4m1f9x7927.execute-api.eu-north-1.amazonaws.com/dev';\nfunction App() {\n  _s();\n  // State för att lagra meddelanden och formulärdata\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState({\n    username: '',\n    text: ''\n  });\n  const [editMessage, setEditMessage] = useState({\n    id: '',\n    createdAt: '',\n    text: ''\n  }); // State för redigering\n\n  // Hämtar meddelanden när komponenten laddas\n  useEffect(() => {\n    fetchMessages();\n  }, []);\n\n  // Funktion för att hämta alla meddelanden\n  const fetchMessages = async () => {\n    try {\n      const response = await axios.get(`${apiBaseUrl}/messages`);\n      setMessages(response.data);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n\n  // Funktion för att skicka ett nytt meddelande\n  const postMessage = async () => {\n    try {\n      await axios.post(`${apiBaseUrl}/messages`, newMessage);\n      fetchMessages(); // Uppdatera listan med meddelanden efter att ett nytt har skickats\n      setNewMessage({\n        username: '',\n        text: ''\n      }); // Återställ inmatningsfälten\n    } catch (error) {\n      console.error('Error posting message:', error);\n    }\n  };\n\n  // Funktion för att förbereda redigering av ett meddelande\n  const prepareEdit = message => {\n    setEditMessage({\n      id: message.id.S,\n      createdAt: message.createdAt.N,\n      text: message.text.S\n    });\n  };\n\n  // Funktion för att uppdatera ett meddelande\n  const updateMessage = async (id, createdAt, currentText) => {\n    // Visa prompt med nuvarande text\n    const updatedText = prompt('Ange ny text för meddelandet:', currentText);\n    if (updatedText && updatedText !== currentText) {\n      try {\n        // Skicka PUT-anropet med rätt ID, createdAt och uppdaterad text\n        await axios.put(`${apiBaseUrl}/messages/${id}`, {\n          id: id,\n          // Skicka med ID\n          createdAt: createdAt,\n          // Skicka med createdAt\n          text: updatedText // Den nya texten som ska uppdateras\n        });\n        fetchMessages(); // Uppdatera listan med meddelanden efter uppdatering\n      } catch (error) {\n        console.error('Error updating message:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cont\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Message Board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"container\",\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"message-message\",\n          children: message.text.S\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"message-user\",\n          children: [\"- \", message.username.S]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-div\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => updateMessage(message.id.S, message.createdAt.N, message.text.S),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }, this)]\n      }, message.id.S, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), editMessage.id && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Edit Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: editMessage.text,\n        onChange: e => setEditMessage({\n          ...editMessage,\n          text: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: updateMessage,\n        children: \"Update Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rpeIxfjx5487xbUKYFrdyYmiN70=\");\n_c = App;\nexport default App;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// // Ange din API-bas-URL\n// const apiBaseUrl = 'https://kyacy3wdag.execute-api.eu-north-1.amazonaws.com/dev';\n\n// function App() {\n//   const [messages, setMessages] = useState([]);\n//   const [newMessage, setNewMessage] = useState({ username: '', text: '' });\n\n//   useEffect(() => {\n//     fetchMessages();\n//   }, []);\n\n//   const fetchMessages = async () => {\n//     try {\n//       const response = await axios.get(`${apiBaseUrl}/messages`, {\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//       });\n//       setMessages(response.data);\n//     } catch (error) {\n//       console.error('Error fetching messages:', error);\n//     }\n//   };\n\n//   const postMessage = async () => {\n//     try {\n//       await axios.post(`${apiBaseUrl}/messages`, newMessage);\n//       fetchMessages(); \n//       setNewMessage({ username: '', text: '' });\n//     } catch (error) {\n//       console.error('Error posting message:', error);\n//     }\n//   };\n\n//   const updateMessage = async (message) => {\n//     const updatedText = prompt('Ange ny text för meddelandet:', message.text.S);\n//     if (updatedText) {\n//       try {\n//         await axios.put(`${apiBaseUrl}/messages/${message.id.S}`, {\n//           id: message.id.S,\n//           createdAt: message.createdAt.N, \n//           text: updatedText\n//         });\n//         fetchMessages();\n//       } catch (error) {\n//         console.error('Error updating message:', error);\n//       }\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Message Board</h1>\n//       <div>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Username\"\n//           value={newMessage.username}\n//           onChange={(e) => setNewMessage({ ...newMessage, username: e.target.value })}\n//         />\n//         <textarea\n//           placeholder=\"Message\"\n//           value={newMessage.text}\n//           onChange={(e) => setNewMessage({ ...newMessage, text: e.target.value })}\n//         />\n//         <button onClick={postMessage}>Post Message</button>\n//       </div>\n//       <ul>\n//         {messages.map((message) => (\n//           <li key={message.id.S}>\n//             <p>{message.username.S}: {message.text.S}</p>\n//             <button onClick={() => updateMessage(message)}>Edit</button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// // Ange din API-bas-URL\n// const apiBaseUrl = 'https://kyacy3wdag.execute-api.eu-north-1.amazonaws.com/dev';\n\n// function App() {\n//   // State för att lagra meddelanden och nytt meddelande\n//   const [messages, setMessages] = useState([]);\n//   const [newMessage, setNewMessage] = useState({ username: '', text: '' });\n\n//   // Hämtar meddelanden när komponenten laddas\n//   useEffect(() => {\n//     fetchMessages();\n//   }, []);\n\n//   // Funktion för att hämta alla meddelanden\n//   const fetchMessages = async () => {\n//     try {\n//       const response = await axios.get(`${apiBaseUrl}/messages`, {\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//       });\n//       setMessages(response.data);\n//     } catch (error) {\n//       console.error('Error fetching messages:', error);\n//     }\n//   };\n\n//   // Funktion för att skicka ett nytt meddelande\n//   const postMessage = async () => {\n//     try {\n//       await axios.post(`${apiBaseUrl}/messages`, newMessage);\n//       fetchMessages(); // Uppdatera listan med meddelanden efter att ett nytt har skickats\n//       setNewMessage({ username: '', text: '' }); // Återställ inmatningsfälten\n//     } catch (error) {\n//       console.error('Error posting message:', error);\n//     }\n//   };\n\n//   // Funktion för att uppdatera ett meddelande\n//   const updateMessage = async (id) => {\n//     const updatedText = prompt('Ange ny text för meddelandet:');\n//     if (updatedText) {\n//       try {\n//         await axios.put(`${apiBaseUrl}/messages/${id}`, { text: updatedText });\n//         fetchMessages(); // Uppdatera listan med meddelanden efter uppdatering\n//       } catch (error) {\n//         console.error('Error updating message:', error);\n//       }\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Message Board</h1>\n//       <div>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Username\"\n//           value={newMessage.username}\n//           onChange={(e) => setNewMessage({ ...newMessage, username: e.target.value })}\n//         />\n//         <textarea\n//           placeholder=\"Message\"\n//           value={newMessage.text}\n//           onChange={(e) => setNewMessage({ ...newMessage, text: e.target.value })}\n//         />\n//         <button onClick={postMessage}>Post Message</button>\n//       </div>\n//       <ul>\n//         {messages.map((message) => (\n//           <li key={message.id.S}> {/* Använd message.id.S om ID är ett DynamoDB String-attribut */}\n//             <p>{message.username.S}: {message.text.S}</p> {/* message.username.S och message.text.S om attribut är String */}\n//             <button onClick={() => updateMessage(message.id.S)}>Edit</button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const apiBaseUrl = 'https://rto8u369c7.execute-api.eu-north-1.amazonaws.com/dev';\n\n// function App() {\n//   const [messages, setMessages] = useState([]);\n//   const [newMessage, setNewMessage] = useState({ username: '', text: '' });\n\n//   useEffect(() => {\n//     fetchMessages();\n//   }, []);\n\n//   const fetchMessages = async () => {\n//     try {\n//       const response = await axios.get(`${apiBaseUrl}/messages`, {\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//       });\n//       setMessages(response.data);\n//     } catch (error) {\n//       console.error('Error fetching messages:', error);\n//     }\n//   };\n\n//   const postMessage = async () => {\n//     try {\n//       await axios.post(`${apiBaseUrl}/messages`, newMessage);\n//       fetchMessages();\n//       setNewMessage({ username: '', text: '' });\n//     } catch (error) {\n//       console.error('Error posting message:', error);\n//     }\n//   };\n\n//   const updateMessage = async (id) => {\n//     const updatedText = prompt('Ange ny text för meddelandet:');\n//     if (updatedText) {\n//       try {\n//         await axios.put(`${apiBaseUrl}/messages/${id}`, { text: updatedText });\n//         fetchMessages();\n//       } catch (error) {\n//         console.error('Error updating message:', error);\n//       }\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Message Board</h1>\n//       <div>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Username\"\n//           value={newMessage.username}\n//           onChange={(e) => setNewMessage({ ...newMessage, username: e.target.value })}\n//         />\n//         <textarea\n//           placeholder=\"Message\"\n//           value={newMessage.text}\n//           onChange={(e) => setNewMessage({ ...newMessage, text: e.target.value })}\n//         />\n//         <button onClick={postMessage}>Post Message</button>\n//       </div>\n//       <ul>\n//         {messages.map((message) => (\n//           <li key={message.id}>\n//             <p>{message.username}: {message.text}</p>\n//             <button onClick={() => updateMessage(message.id)}>Edit</button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","apiBaseUrl","App","_s","messages","setMessages","newMessage","setNewMessage","username","text","editMessage","setEditMessage","id","createdAt","fetchMessages","response","get","data","error","console","postMessage","post","prepareEdit","message","S","N","updateMessage","currentText","updatedText","prompt","put","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/christofferwallman/message-board/frontend/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css'\n\n// Ange din API-bas-URL\nconst apiBaseUrl = 'https://4m1f9x7927.execute-api.eu-north-1.amazonaws.com/dev';\n\nfunction App() {\n  // State för att lagra meddelanden och formulärdata\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState({ username: '', text: '' });\n  const [editMessage, setEditMessage] = useState({ id: '', createdAt: '', text: '' }); // State för redigering\n\n  // Hämtar meddelanden när komponenten laddas\n  useEffect(() => {\n    fetchMessages();\n  }, []);\n\n  // Funktion för att hämta alla meddelanden\n  const fetchMessages = async () => {\n    try {\n      const response = await axios.get(`${apiBaseUrl}/messages`);\n      setMessages(response.data);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n\n  // Funktion för att skicka ett nytt meddelande\n  const postMessage = async () => {\n    try {\n      await axios.post(`${apiBaseUrl}/messages`, newMessage);\n      fetchMessages(); // Uppdatera listan med meddelanden efter att ett nytt har skickats\n      setNewMessage({ username: '', text: '' }); // Återställ inmatningsfälten\n    } catch (error) {\n      console.error('Error posting message:', error);\n    }\n  };\n\n  // Funktion för att förbereda redigering av ett meddelande\n  const prepareEdit = (message) => {\n    setEditMessage({\n      id: message.id.S,\n      createdAt: message.createdAt.N,\n      text: message.text.S,\n    });\n  };\n\n  // Funktion för att uppdatera ett meddelande\n  const updateMessage = async (id, createdAt, currentText) => {\n    // Visa prompt med nuvarande text\n    const updatedText = prompt('Ange ny text för meddelandet:', currentText);\n    \n    if (updatedText && updatedText !== currentText) {\n      try {\n        // Skicka PUT-anropet med rätt ID, createdAt och uppdaterad text\n        await axios.put(`${apiBaseUrl}/messages/${id}`, {\n          id: id, // Skicka med ID\n          createdAt: createdAt, // Skicka med createdAt\n          text: updatedText // Den nya texten som ska uppdateras\n        });\n        fetchMessages(); // Uppdatera listan med meddelanden efter uppdatering\n      } catch (error) {\n        console.error('Error updating message:', error);\n      }\n    }\n  };\n\n  return (\n    <div className=\"cont\">\n      <h1>Message Board</h1>\n\n      {/* Lista över meddelanden */}\n      <ul className=\"container\">\n            {messages.map((message) => (\n              <li key={message.id.S} className=\"list-container\">\n                <p className=\"message-message\">{message.text.S}</p>\n                <p className=\"message-user\">- {message.username.S}</p>\n                <div className=\"button-div\">\n                  <button \n                    onClick={() => updateMessage(\n                      message.id.S, \n                      message.createdAt.N, \n                      message.text.S\n                    )}\n                  >\n                    Edit\n                  </button>\n                </div>\n              </li>     \n            ))}\n      </ul>\n\n      {/* Formulär för att redigera ett meddelande */}\n      {editMessage.id && (\n        <div>\n          <h2>Edit Message</h2>\n          <textarea\n            value={editMessage.text}\n            onChange={(e) => setEditMessage({ ...editMessage, text: e.target.value })}\n          />\n          <button onClick={updateMessage}>Update Message</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// // Ange din API-bas-URL\n// const apiBaseUrl = 'https://kyacy3wdag.execute-api.eu-north-1.amazonaws.com/dev';\n\n// function App() {\n//   const [messages, setMessages] = useState([]);\n//   const [newMessage, setNewMessage] = useState({ username: '', text: '' });\n\n//   useEffect(() => {\n//     fetchMessages();\n//   }, []);\n\n//   const fetchMessages = async () => {\n//     try {\n//       const response = await axios.get(`${apiBaseUrl}/messages`, {\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//       });\n//       setMessages(response.data);\n//     } catch (error) {\n//       console.error('Error fetching messages:', error);\n//     }\n//   };\n\n//   const postMessage = async () => {\n//     try {\n//       await axios.post(`${apiBaseUrl}/messages`, newMessage);\n//       fetchMessages(); \n//       setNewMessage({ username: '', text: '' });\n//     } catch (error) {\n//       console.error('Error posting message:', error);\n//     }\n//   };\n\n//   const updateMessage = async (message) => {\n//     const updatedText = prompt('Ange ny text för meddelandet:', message.text.S);\n//     if (updatedText) {\n//       try {\n//         await axios.put(`${apiBaseUrl}/messages/${message.id.S}`, {\n//           id: message.id.S,\n//           createdAt: message.createdAt.N, \n//           text: updatedText\n//         });\n//         fetchMessages();\n//       } catch (error) {\n//         console.error('Error updating message:', error);\n//       }\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Message Board</h1>\n//       <div>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Username\"\n//           value={newMessage.username}\n//           onChange={(e) => setNewMessage({ ...newMessage, username: e.target.value })}\n//         />\n//         <textarea\n//           placeholder=\"Message\"\n//           value={newMessage.text}\n//           onChange={(e) => setNewMessage({ ...newMessage, text: e.target.value })}\n//         />\n//         <button onClick={postMessage}>Post Message</button>\n//       </div>\n//       <ul>\n//         {messages.map((message) => (\n//           <li key={message.id.S}>\n//             <p>{message.username.S}: {message.text.S}</p>\n//             <button onClick={() => updateMessage(message)}>Edit</button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// // Ange din API-bas-URL\n// const apiBaseUrl = 'https://kyacy3wdag.execute-api.eu-north-1.amazonaws.com/dev';\n\n// function App() {\n//   // State för att lagra meddelanden och nytt meddelande\n//   const [messages, setMessages] = useState([]);\n//   const [newMessage, setNewMessage] = useState({ username: '', text: '' });\n\n//   // Hämtar meddelanden när komponenten laddas\n//   useEffect(() => {\n//     fetchMessages();\n//   }, []);\n\n//   // Funktion för att hämta alla meddelanden\n//   const fetchMessages = async () => {\n//     try {\n//       const response = await axios.get(`${apiBaseUrl}/messages`, {\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//       });\n//       setMessages(response.data);\n//     } catch (error) {\n//       console.error('Error fetching messages:', error);\n//     }\n//   };\n\n//   // Funktion för att skicka ett nytt meddelande\n//   const postMessage = async () => {\n//     try {\n//       await axios.post(`${apiBaseUrl}/messages`, newMessage);\n//       fetchMessages(); // Uppdatera listan med meddelanden efter att ett nytt har skickats\n//       setNewMessage({ username: '', text: '' }); // Återställ inmatningsfälten\n//     } catch (error) {\n//       console.error('Error posting message:', error);\n//     }\n//   };\n\n//   // Funktion för att uppdatera ett meddelande\n//   const updateMessage = async (id) => {\n//     const updatedText = prompt('Ange ny text för meddelandet:');\n//     if (updatedText) {\n//       try {\n//         await axios.put(`${apiBaseUrl}/messages/${id}`, { text: updatedText });\n//         fetchMessages(); // Uppdatera listan med meddelanden efter uppdatering\n//       } catch (error) {\n//         console.error('Error updating message:', error);\n//       }\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Message Board</h1>\n//       <div>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Username\"\n//           value={newMessage.username}\n//           onChange={(e) => setNewMessage({ ...newMessage, username: e.target.value })}\n//         />\n//         <textarea\n//           placeholder=\"Message\"\n//           value={newMessage.text}\n//           onChange={(e) => setNewMessage({ ...newMessage, text: e.target.value })}\n//         />\n//         <button onClick={postMessage}>Post Message</button>\n//       </div>\n//       <ul>\n//         {messages.map((message) => (\n//           <li key={message.id.S}> {/* Använd message.id.S om ID är ett DynamoDB String-attribut */}\n//             <p>{message.username.S}: {message.text.S}</p> {/* message.username.S och message.text.S om attribut är String */}\n//             <button onClick={() => updateMessage(message.id.S)}>Edit</button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const apiBaseUrl = 'https://rto8u369c7.execute-api.eu-north-1.amazonaws.com/dev';\n\n// function App() {\n//   const [messages, setMessages] = useState([]);\n//   const [newMessage, setNewMessage] = useState({ username: '', text: '' });\n\n//   useEffect(() => {\n//     fetchMessages();\n//   }, []);\n\n//   const fetchMessages = async () => {\n//     try {\n//       const response = await axios.get(`${apiBaseUrl}/messages`, {\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//       });\n//       setMessages(response.data);\n//     } catch (error) {\n//       console.error('Error fetching messages:', error);\n//     }\n//   };\n\n//   const postMessage = async () => {\n//     try {\n//       await axios.post(`${apiBaseUrl}/messages`, newMessage);\n//       fetchMessages();\n//       setNewMessage({ username: '', text: '' });\n//     } catch (error) {\n//       console.error('Error posting message:', error);\n//     }\n//   };\n\n//   const updateMessage = async (id) => {\n//     const updatedText = prompt('Ange ny text för meddelandet:');\n//     if (updatedText) {\n//       try {\n//         await axios.put(`${apiBaseUrl}/messages/${id}`, { text: updatedText });\n//         fetchMessages();\n//       } catch (error) {\n//         console.error('Error updating message:', error);\n//       }\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Message Board</h1>\n//       <div>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Username\"\n//           value={newMessage.username}\n//           onChange={(e) => setNewMessage({ ...newMessage, username: e.target.value })}\n//         />\n//         <textarea\n//           placeholder=\"Message\"\n//           value={newMessage.text}\n//           onChange={(e) => setNewMessage({ ...newMessage, text: e.target.value })}\n//         />\n//         <button onClick={postMessage}>Post Message</button>\n//       </div>\n//       <ul>\n//         {messages.map((message) => (\n//           <li key={message.id}>\n//             <p>{message.username}: {message.text}</p>\n//             <button onClick={() => updateMessage(message.id)}>Edit</button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}