{"ast":null,"code":"var _jsxFileName = \"/Users/christofferwallman/message-board/frontend/frontend/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { useNavigate } from 'react-router-dom';\n\n// Ange din API-bas-URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiBaseUrl = 'https://4m1f9x7927.execute-api.eu-north-1.amazonaws.com/dev';\nfunction App() {\n  _s();\n  // State för att lagra meddelanden och formulärdata\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState({\n    username: '',\n    text: ''\n  });\n  const [editMessage, setEditMessage] = useState({\n    id: '',\n    createdAt: '',\n    text: ''\n  }); // State för redigering\n\n  // Hämtar meddelanden när komponenten laddas\n  useEffect(() => {\n    fetchMessages();\n  }, []);\n  const fetchMessages = async () => {\n    try {\n      const response = await axios.get(`${apiBaseUrl}/messages`);\n\n      // Sortera meddelandena baserat på createdAt i fallande ordning\n      const sortedMessages = response.data.sort((a, b) => {\n        return parseInt(b.createdAt.N) - parseInt(a.createdAt.N);\n      });\n      setMessages(sortedMessages);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n\n  // Funktion för att skicka ett nytt meddelande\n  const postMessage = async () => {\n    try {\n      await axios.post(`${apiBaseUrl}/messages`, newMessage);\n      fetchMessages(); // Uppdatera listan med meddelanden efter att ett nytt har skickats\n      setNewMessage({\n        username: '',\n        text: ''\n      }); // Återställ inmatningsfälten\n    } catch (error) {\n      console.error('Error posting message:', error);\n    }\n  };\n\n  // Funktion för att förbereda redigering av ett meddelande\n  const prepareEdit = message => {\n    setEditMessage({\n      id: message.id.S,\n      createdAt: message.createdAt.N,\n      text: message.text.S\n    });\n  };\n\n  // Funktion för att uppdatera ett meddelande\n  const updateMessage = async (id, createdAt, currentText) => {\n    // Visa prompt med nuvarande text\n    const updatedText = prompt('Ange ny text för meddelandet:', currentText);\n    if (updatedText && updatedText !== currentText) {\n      try {\n        // Skicka PUT-anropet med rätt ID, createdAt och uppdaterad text\n        await axios.put(`${apiBaseUrl}/messages/${id}`, {\n          id: id,\n          // Skicka med ID\n          createdAt: createdAt,\n          // Skicka med createdAt\n          text: updatedText // Den nya texten som ska uppdateras\n        });\n        fetchMessages(); // Uppdatera listan med meddelanden efter uppdatering\n      } catch (error) {\n        console.error('Error updating message:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"style-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cont\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Message Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"container\",\n        children: messages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"message-message\",\n            children: message.text.S\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"message-user\",\n            children: [\"- \", message.username.S]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-div\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => updateMessage(message.id.S, message.createdAt.N, message.text.S),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this)]\n        }, message.id.S, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), editMessage.id && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Edit Message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: editMessage.text,\n          onChange: e => setEditMessage({\n            ...editMessage,\n            text: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: updateMessage,\n          children: \"Update Message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(YourComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n// Flytta YourComponent utanför App-komponenten\n_s(App, \"rpeIxfjx5487xbUKYFrdyYmiN70=\");\n_c = App;\nfunction YourComponent() {\n  _s2();\n  const navigate = useNavigate();\n  const goBackToHome = () => {\n    navigate('/'); // Navigera till startsidan\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: goBackToHome,\n    children: \"Back to Home\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n_s2(YourComponent, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c2 = YourComponent;\nexport default App;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './App.css'\n// import { useNavigate } from 'react-router-dom';\n\n// // Ange din API-bas-URL\n// const apiBaseUrl = 'https://4m1f9x7927.execute-api.eu-north-1.amazonaws.com/dev';\n\n// function App() {\n//   // State för att lagra meddelanden och formulärdata\n//   const [messages, setMessages] = useState([]);\n//   const [newMessage, setNewMessage] = useState({ username: '', text: '' });\n//   const [editMessage, setEditMessage] = useState({ id: '', createdAt: '', text: '' }); // State för redigering\n\n//   // Hämtar meddelanden när komponenten laddas\n//   useEffect(() => {\n//     fetchMessages();\n//   }, []);\n\n//   const fetchMessages = async () => {\n//     try {\n//       const response = await axios.get(`${apiBaseUrl}/messages`);\n\n//       // Sortera meddelandena baserat på createdAt i fallande ordning\n//       const sortedMessages = response.data.sort((a, b) => {\n//         return parseInt(b.createdAt.N) - parseInt(a.createdAt.N);\n//       });\n\n//       setMessages(sortedMessages);\n//     } catch (error) {\n//       console.error('Error fetching messages:', error);\n//     }\n//   };\n\n//   // Funktion för att skicka ett nytt meddelande\n//   const postMessage = async () => {\n//     try {\n//       await axios.post(`${apiBaseUrl}/messages`, newMessage);\n//       fetchMessages(); // Uppdatera listan med meddelanden efter att ett nytt har skickats\n//       setNewMessage({ username: '', text: '' }); // Återställ inmatningsfälten\n//     } catch (error) {\n//       console.error('Error posting message:', error);\n//     }\n//   };\n\n//   // Funktion för att förbereda redigering av ett meddelande\n//   const prepareEdit = (message) => {\n//     setEditMessage({\n//       id: message.id.S,\n//       createdAt: message.createdAt.N,\n//       text: message.text.S,\n//     });\n//   };\n\n//   // Funktion för att uppdatera ett meddelande\n//   const updateMessage = async (id, createdAt, currentText) => {\n//     // Visa prompt med nuvarande text\n//     const updatedText = prompt('Ange ny text för meddelandet:', currentText);\n\n//     if (updatedText && updatedText !== currentText) {\n//       try {\n//         // Skicka PUT-anropet med rätt ID, createdAt och uppdaterad text\n//         await axios.put(`${apiBaseUrl}/messages/${id}`, {\n//           id: id, // Skicka med ID\n//           createdAt: createdAt, // Skicka med createdAt\n//           text: updatedText // Den nya texten som ska uppdateras\n//         });\n//         fetchMessages(); // Uppdatera listan med meddelanden efter uppdatering\n//       } catch (error) {\n//         console.error('Error updating message:', error);\n//       }\n//     }\n//   };\n\n//   return (\n//     <div className=\"style-container\">\n//       <div className=\"cont\">\n//         <h1>Message Board</h1>\n\n//         {/* Lista över meddelanden */}\n//         <ul className=\"container\">\n//               {messages.map((message) => (\n//                 <li key={message.id.S} className=\"list-container\">\n//                   <p className=\"message-message\">{message.text.S}</p>\n//                   <p className=\"message-user\">- {message.username.S}</p>\n//                   <div className=\"button-div\">\n//                     <button \n//                       onClick={() => updateMessage(\n//                         message.id.S, \n//                         message.createdAt.N, \n//                         message.text.S\n//                       )}\n//                     >\n//                       Edit\n//                     </button>\n//                   </div>\n//                 </li>     \n//               ))}\n//         </ul>\n\n//         {/* Formulär för att redigera ett meddelande */}\n//         {editMessage.id && (\n//           <div>\n//             <h2>Edit Message</h2>\n//             <textarea\n//               value={editMessage.text}\n//               onChange={(e) => setEditMessage({ ...editMessage, text: e.target.value })}\n//             />\n//             <button onClick={updateMessage}>Update Message</button>\n//           </div>\n//         )}\n\n//       </div>\n//     </div>\n//   );\n// }\n// function YourComponent() {\n//   const navigate = useNavigate();\n\n//   const goBackToHome = () => {\n//     navigate('/'); // Navigera till startsidan\n//   };\n\n//   return (\n//     <button onClick={goBackToHome}>\n//       Back to Home\n//     </button>\n//   );\n// }\n\n// export default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"YourComponent\");","map":{"version":3,"names":["React","useState","useEffect","axios","useNavigate","jsxDEV","_jsxDEV","apiBaseUrl","App","_s","messages","setMessages","newMessage","setNewMessage","username","text","editMessage","setEditMessage","id","createdAt","fetchMessages","response","get","sortedMessages","data","sort","a","b","parseInt","N","error","console","postMessage","post","prepareEdit","message","S","updateMessage","currentText","updatedText","prompt","put","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","value","onChange","e","target","YourComponent","_c","_s2","navigate","goBackToHome","_c2","$RefreshReg$"],"sources":["/Users/christofferwallman/message-board/frontend/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css'\nimport { useNavigate } from 'react-router-dom';\n\n// Ange din API-bas-URL\nconst apiBaseUrl = 'https://4m1f9x7927.execute-api.eu-north-1.amazonaws.com/dev';\n\nfunction App() {\n  // State för att lagra meddelanden och formulärdata\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState({ username: '', text: '' });\n  const [editMessage, setEditMessage] = useState({ id: '', createdAt: '', text: '' }); // State för redigering\n\n  // Hämtar meddelanden när komponenten laddas\n  useEffect(() => {\n    fetchMessages();\n  }, []);\n\n  const fetchMessages = async () => {\n    try {\n      const response = await axios.get(`${apiBaseUrl}/messages`);\n  \n      // Sortera meddelandena baserat på createdAt i fallande ordning\n      const sortedMessages = response.data.sort((a, b) => {\n        return parseInt(b.createdAt.N) - parseInt(a.createdAt.N);\n      });\n  \n      setMessages(sortedMessages);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n\n  // Funktion för att skicka ett nytt meddelande\n  const postMessage = async () => {\n    try {\n      await axios.post(`${apiBaseUrl}/messages`, newMessage);\n      fetchMessages(); // Uppdatera listan med meddelanden efter att ett nytt har skickats\n      setNewMessage({ username: '', text: '' }); // Återställ inmatningsfälten\n    } catch (error) {\n      console.error('Error posting message:', error);\n    }\n  };\n\n  // Funktion för att förbereda redigering av ett meddelande\n  const prepareEdit = (message) => {\n    setEditMessage({\n      id: message.id.S,\n      createdAt: message.createdAt.N,\n      text: message.text.S,\n    });\n  };\n\n  // Funktion för att uppdatera ett meddelande\n  const updateMessage = async (id, createdAt, currentText) => {\n    // Visa prompt med nuvarande text\n    const updatedText = prompt('Ange ny text för meddelandet:', currentText);\n    \n    if (updatedText && updatedText !== currentText) {\n      try {\n        // Skicka PUT-anropet med rätt ID, createdAt och uppdaterad text\n        await axios.put(`${apiBaseUrl}/messages/${id}`, {\n          id: id, // Skicka med ID\n          createdAt: createdAt, // Skicka med createdAt\n          text: updatedText // Den nya texten som ska uppdateras\n        });\n        fetchMessages(); // Uppdatera listan med meddelanden efter uppdatering\n      } catch (error) {\n        console.error('Error updating message:', error);\n      }\n    }\n  };\n\n  return (\n    <div className=\"style-container\">\n      <div className=\"cont\">\n        <h1>Message Board</h1>\n\n\n        {/* Lista över meddelanden */}\n        <ul className=\"container\">\n          {messages.map((message) => (\n            <li key={message.id.S} className=\"list-container\">\n              <p className=\"message-message\">{message.text.S}</p>\n              <p className=\"message-user\">- {message.username.S}</p>\n              <div className=\"button-div\">\n                <button \n                  onClick={() => updateMessage(\n                    message.id.S, \n                    message.createdAt.N, \n                    message.text.S\n                  )}\n                >\n                  Edit\n                </button>\n              </div>\n            </li>     \n          ))}\n        </ul>\n\n        {/* Formulär för att redigera ett meddelande */}\n        {editMessage.id && (\n          <div>\n            <h2>Edit Message</h2>\n            <textarea\n              value={editMessage.text}\n              onChange={(e) => setEditMessage({ ...editMessage, text: e.target.value })}\n            />\n            <button onClick={updateMessage}>Update Message</button>\n          </div>\n        )}\n        \n        <YourComponent />\n      </div>\n    </div>\n  );\n}\n\n// Flytta YourComponent utanför App-komponenten\nfunction YourComponent() {\n  const navigate = useNavigate();\n\n  const goBackToHome = () => {\n    navigate('/'); // Navigera till startsidan\n  };\n\n  return (\n    <button onClick={goBackToHome}>\n      Back to Home\n    </button>\n  );\n}\n\nexport default App;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './App.css'\n// import { useNavigate } from 'react-router-dom';\n\n// // Ange din API-bas-URL\n// const apiBaseUrl = 'https://4m1f9x7927.execute-api.eu-north-1.amazonaws.com/dev';\n\n// function App() {\n//   // State för att lagra meddelanden och formulärdata\n//   const [messages, setMessages] = useState([]);\n//   const [newMessage, setNewMessage] = useState({ username: '', text: '' });\n//   const [editMessage, setEditMessage] = useState({ id: '', createdAt: '', text: '' }); // State för redigering\n\n//   // Hämtar meddelanden när komponenten laddas\n//   useEffect(() => {\n//     fetchMessages();\n//   }, []);\n\n//   const fetchMessages = async () => {\n//     try {\n//       const response = await axios.get(`${apiBaseUrl}/messages`);\n  \n//       // Sortera meddelandena baserat på createdAt i fallande ordning\n//       const sortedMessages = response.data.sort((a, b) => {\n//         return parseInt(b.createdAt.N) - parseInt(a.createdAt.N);\n//       });\n  \n//       setMessages(sortedMessages);\n//     } catch (error) {\n//       console.error('Error fetching messages:', error);\n//     }\n//   };\n\n//   // Funktion för att skicka ett nytt meddelande\n//   const postMessage = async () => {\n//     try {\n//       await axios.post(`${apiBaseUrl}/messages`, newMessage);\n//       fetchMessages(); // Uppdatera listan med meddelanden efter att ett nytt har skickats\n//       setNewMessage({ username: '', text: '' }); // Återställ inmatningsfälten\n//     } catch (error) {\n//       console.error('Error posting message:', error);\n//     }\n//   };\n\n//   // Funktion för att förbereda redigering av ett meddelande\n//   const prepareEdit = (message) => {\n//     setEditMessage({\n//       id: message.id.S,\n//       createdAt: message.createdAt.N,\n//       text: message.text.S,\n//     });\n//   };\n\n//   // Funktion för att uppdatera ett meddelande\n//   const updateMessage = async (id, createdAt, currentText) => {\n//     // Visa prompt med nuvarande text\n//     const updatedText = prompt('Ange ny text för meddelandet:', currentText);\n    \n//     if (updatedText && updatedText !== currentText) {\n//       try {\n//         // Skicka PUT-anropet med rätt ID, createdAt och uppdaterad text\n//         await axios.put(`${apiBaseUrl}/messages/${id}`, {\n//           id: id, // Skicka med ID\n//           createdAt: createdAt, // Skicka med createdAt\n//           text: updatedText // Den nya texten som ska uppdateras\n//         });\n//         fetchMessages(); // Uppdatera listan med meddelanden efter uppdatering\n//       } catch (error) {\n//         console.error('Error updating message:', error);\n//       }\n//     }\n//   };\n\n//   return (\n//     <div className=\"style-container\">\n//       <div className=\"cont\">\n//         <h1>Message Board</h1>\n\n//         {/* Lista över meddelanden */}\n//         <ul className=\"container\">\n//               {messages.map((message) => (\n//                 <li key={message.id.S} className=\"list-container\">\n//                   <p className=\"message-message\">{message.text.S}</p>\n//                   <p className=\"message-user\">- {message.username.S}</p>\n//                   <div className=\"button-div\">\n//                     <button \n//                       onClick={() => updateMessage(\n//                         message.id.S, \n//                         message.createdAt.N, \n//                         message.text.S\n//                       )}\n//                     >\n//                       Edit\n//                     </button>\n//                   </div>\n//                 </li>     \n//               ))}\n//         </ul>\n\n//         {/* Formulär för att redigera ett meddelande */}\n//         {editMessage.id && (\n//           <div>\n//             <h2>Edit Message</h2>\n//             <textarea\n//               value={editMessage.text}\n//               onChange={(e) => setEditMessage({ ...editMessage, text: e.target.value })}\n//             />\n//             <button onClick={updateMessage}>Update Message</button>\n//           </div>\n//         )}\n        \n//       </div>\n//     </div>\n//   );\n// }\n// function YourComponent() {\n//   const navigate = useNavigate();\n\n//   const goBackToHome = () => {\n//     navigate('/'); // Navigera till startsidan\n//   };\n\n//   return (\n//     <button onClick={goBackToHome}>\n//       Back to Home\n//     </button>\n//   );\n// }\n\n// export default App;\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}