{"ast":null,"code":"var _jsxFileName = \"/Users/christofferwallman/message-board/frontend/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\n// Ange din API-bas-URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiBaseUrl = 'https://4m1f9x7927.execute-api.eu-north-1.amazonaws.com/dev';\nfunction App() {\n  _s();\n  // State för att lagra meddelanden och formulärdata\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState({\n    username: '',\n    text: ''\n  });\n  const [editMessage, setEditMessage] = useState({\n    id: '',\n    createdAt: '',\n    text: ''\n  }); // State för redigering\n  const [isEditing, setIsEditing] = useState(false); // Ny state för att hantera visning av formulär\n\n  // Hämtar meddelanden när komponenten laddas\n  useEffect(() => {\n    fetchMessages();\n  }, []);\n\n  // Funktion för att hämta alla meddelanden\n  const fetchMessages = async () => {\n    try {\n      const response = await axios.get(`${apiBaseUrl}/messages`);\n\n      // Sortera meddelandena baserat på createdAt i fallande ordning\n      const sortedMessages = response.data.sort((a, b) => {\n        return parseInt(b.createdAt.N) - parseInt(a.createdAt.N);\n      });\n      setMessages(sortedMessages);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n\n  // Funktion för att skicka ett nytt meddelande\n  const postMessage = async () => {\n    try {\n      await axios.post(`${apiBaseUrl}/messages`, newMessage);\n      fetchMessages(); // Uppdatera listan med meddelanden efter att ett nytt har skickats\n      setNewMessage({\n        username: '',\n        text: ''\n      }); // Återställ inmatningsfälten\n    } catch (error) {\n      console.error('Error posting message:', error);\n    }\n  };\n\n  // Funktion för att förbereda redigering av ett meddelande\n  const prepareEdit = message => {\n    setEditMessage({\n      id: message.id.S,\n      createdAt: message.createdAt.N,\n      text: message.text.S\n    });\n    setIsEditing(true); // Växla till redigeringsläge\n  };\n\n  // Funktion för att uppdatera ett meddelande\n  const updateMessage = async (id, createdAt, currentText) => {\n    // Visa prompt med nuvarande text\n    const updatedText = prompt('Ange ny text för meddelandet:', currentText);\n    if (updatedText && updatedText !== currentText) {\n      try {\n        // Skicka PUT-anropet med rätt ID, createdAt och uppdaterad text\n        await axios.put(`${apiBaseUrl}/messages/${id}`, {\n          id: id,\n          // Skicka med ID\n          createdAt: createdAt,\n          // Skicka med createdAt\n          text: updatedText // Den nya texten som ska uppdateras\n        });\n        fetchMessages(); // Uppdatera listan med meddelanden efter uppdatering\n        setIsEditing(false); // Avsluta redigeringsläge efter uppdatering\n      } catch (error) {\n        console.error('Error updating message:', error);\n      }\n    }\n  };\n\n  // Funktion för att växla till \"skapa nytt meddelande\"-läge\n  const goToCreateMode = () => {\n    setIsEditing(false);\n    setEditMessage({\n      id: '',\n      createdAt: '',\n      text: ''\n    }); // Återställ redigerings-state\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"style-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cont\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Message Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), !isEditing ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Username\",\n            value: newMessage.username,\n            onChange: e => setNewMessage({\n              ...newMessage,\n              username: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            placeholder: \"Message\",\n            value: newMessage.text,\n            onChange: e => setNewMessage({\n              ...newMessage,\n              text: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: postMessage,\n            children: \"Post Message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"container\",\n          children: messages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"list-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"message-message\",\n              children: message.text.S\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"message-user\",\n              children: [\"- \", message.username.S]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"button-div\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => prepareEdit(message),\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 19\n            }, this)]\n          }, message.id.S, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Edit Message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: editMessage.text,\n          onChange: e => setEditMessage({\n            ...editMessage,\n            text: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => updateMessage(editMessage.id, editMessage.createdAt, editMessage.text),\n          children: \"Update Message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: goToCreateMode,\n          children: \"Back to Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Z1mVFrHJn8olvbKYZ0MDGUrzLjc=\");\n_c = App;\nexport default App;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './App.css'\n\n// // Ange din API-bas-URL\n// const apiBaseUrl = 'https://4m1f9x7927.execute-api.eu-north-1.amazonaws.com/dev';\n\n// function App() {\n//   // State för att lagra meddelanden och formulärdata\n//   const [messages, setMessages] = useState([]);\n//   const [newMessage, setNewMessage] = useState({ username: '', text: '' });\n//   const [editMessage, setEditMessage] = useState({ id: '', createdAt: '', text: '' }); // State för redigering\n\n//   // Hämtar meddelanden när komponenten laddas\n//   useEffect(() => {\n//     fetchMessages();\n//   }, []);\n\n//   const fetchMessages = async () => {\n//     try {\n//       const response = await axios.get(`${apiBaseUrl}/messages`);\n\n//       // Sortera meddelandena baserat på createdAt i fallande ordning\n//       const sortedMessages = response.data.sort((a, b) => {\n//         return parseInt(b.createdAt.N) - parseInt(a.createdAt.N);\n//       });\n\n//       setMessages(sortedMessages);\n//     } catch (error) {\n//       console.error('Error fetching messages:', error);\n//     }\n//   };\n\n//   // Funktion för att skicka ett nytt meddelande\n//   const postMessage = async () => {\n//     try {\n//       await axios.post(`${apiBaseUrl}/messages`, newMessage);\n//       fetchMessages(); // Uppdatera listan med meddelanden efter att ett nytt har skickats\n//       setNewMessage({ username: '', text: '' }); // Återställ inmatningsfälten\n//     } catch (error) {\n//       console.error('Error posting message:', error);\n//     }\n//   };\n\n//   // Funktion för att förbereda redigering av ett meddelande\n//   const prepareEdit = (message) => {\n//     setEditMessage({\n//       id: message.id.S,\n//       createdAt: message.createdAt.N,\n//       text: message.text.S,\n//     });\n//   };\n\n//   // Funktion för att uppdatera ett meddelande\n//   const updateMessage = async (id, createdAt, currentText) => {\n//     // Visa prompt med nuvarande text\n//     const updatedText = prompt('Ange ny text för meddelandet:', currentText);\n\n//     if (updatedText && updatedText !== currentText) {\n//       try {\n//         // Skicka PUT-anropet med rätt ID, createdAt och uppdaterad text\n//         await axios.put(`${apiBaseUrl}/messages/${id}`, {\n//           id: id, // Skicka med ID\n//           createdAt: createdAt, // Skicka med createdAt\n//           text: updatedText // Den nya texten som ska uppdateras\n//         });\n//         fetchMessages(); // Uppdatera listan med meddelanden efter uppdatering\n//       } catch (error) {\n//         console.error('Error updating message:', error);\n//       }\n//     }\n//   };\n\n//   return (\n//     <div className=\"style-container\">\n//       <div className=\"cont\">\n//         <h1>Message Board</h1>\n\n//         {/* Lista över meddelanden */}\n//         <ul className=\"container\">\n//               {messages.map((message) => (\n//                 <li key={message.id.S} className=\"list-container\">\n//                   <p className=\"message-message\">{message.text.S}</p>\n//                   <p className=\"message-user\">- {message.username.S}</p>\n//                   <div className=\"button-div\">\n//                     <button \n//                       onClick={() => updateMessage(\n//                         message.id.S, \n//                         message.createdAt.N, \n//                         message.text.S\n//                       )}\n//                     >\n//                       Edit\n//                     </button>\n//                   </div>\n//                 </li>     \n//               ))}\n//         </ul>\n\n//         {/* Formulär för att redigera ett meddelande */}\n//         {editMessage.id && (\n//           <div>\n//             <h2>Edit Message</h2>\n//             <textarea\n//               value={editMessage.text}\n//               onChange={(e) => setEditMessage({ ...editMessage, text: e.target.value })}\n//             />\n//             <button onClick={updateMessage}>Update Message</button>\n//           </div>\n//         )}\n\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","apiBaseUrl","App","_s","messages","setMessages","newMessage","setNewMessage","username","text","editMessage","setEditMessage","id","createdAt","isEditing","setIsEditing","fetchMessages","response","get","sortedMessages","data","sort","a","b","parseInt","N","error","console","postMessage","post","prepareEdit","message","S","updateMessage","currentText","updatedText","prompt","put","goToCreateMode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","map","_c","$RefreshReg$"],"sources":["/Users/christofferwallman/message-board/frontend/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\n// Ange din API-bas-URL\nconst apiBaseUrl = 'https://4m1f9x7927.execute-api.eu-north-1.amazonaws.com/dev';\n\nfunction App() {\n  // State för att lagra meddelanden och formulärdata\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState({ username: '', text: '' });\n  const [editMessage, setEditMessage] = useState({ id: '', createdAt: '', text: '' }); // State för redigering\n  const [isEditing, setIsEditing] = useState(false); // Ny state för att hantera visning av formulär\n\n  // Hämtar meddelanden när komponenten laddas\n  useEffect(() => {\n    fetchMessages();\n  }, []);\n\n  // Funktion för att hämta alla meddelanden\n  const fetchMessages = async () => {\n    try {\n      const response = await axios.get(`${apiBaseUrl}/messages`);\n  \n      // Sortera meddelandena baserat på createdAt i fallande ordning\n      const sortedMessages = response.data.sort((a, b) => {\n        return parseInt(b.createdAt.N) - parseInt(a.createdAt.N);\n      });\n  \n      setMessages(sortedMessages);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n\n  // Funktion för att skicka ett nytt meddelande\n  const postMessage = async () => {\n    try {\n      await axios.post(`${apiBaseUrl}/messages`, newMessage);\n      fetchMessages(); // Uppdatera listan med meddelanden efter att ett nytt har skickats\n      setNewMessage({ username: '', text: '' }); // Återställ inmatningsfälten\n    } catch (error) {\n      console.error('Error posting message:', error);\n    }\n  };\n\n  // Funktion för att förbereda redigering av ett meddelande\n  const prepareEdit = (message) => {\n    setEditMessage({\n      id: message.id.S,\n      createdAt: message.createdAt.N,\n      text: message.text.S,\n    });\n    setIsEditing(true); // Växla till redigeringsläge\n  };\n\n  // Funktion för att uppdatera ett meddelande\n  const updateMessage = async (id, createdAt, currentText) => {\n    // Visa prompt med nuvarande text\n    const updatedText = prompt('Ange ny text för meddelandet:', currentText);\n    \n    if (updatedText && updatedText !== currentText) {\n      try {\n        // Skicka PUT-anropet med rätt ID, createdAt och uppdaterad text\n        await axios.put(`${apiBaseUrl}/messages/${id}`, {\n          id: id, // Skicka med ID\n          createdAt: createdAt, // Skicka med createdAt\n          text: updatedText // Den nya texten som ska uppdateras\n        });\n        fetchMessages(); // Uppdatera listan med meddelanden efter uppdatering\n        setIsEditing(false); // Avsluta redigeringsläge efter uppdatering\n      } catch (error) {\n        console.error('Error updating message:', error);\n      }\n    }\n  };\n\n  // Funktion för att växla till \"skapa nytt meddelande\"-läge\n  const goToCreateMode = () => {\n    setIsEditing(false);\n    setEditMessage({ id: '', createdAt: '', text: '' }); // Återställ redigerings-state\n  };\n\n  return (\n    <div className=\"style-container\">\n      <div className=\"cont\">\n        <h1>Message Board</h1>\n\n        {!isEditing ? (\n          <div>\n            {/* Formulär för att skapa nytt meddelande */}\n            <div className=\"form-container\">\n              <input\n                type=\"text\"\n                placeholder=\"Username\"\n                value={newMessage.username}\n                onChange={(e) => setNewMessage({ ...newMessage, username: e.target.value })}\n              />\n              <textarea\n                placeholder=\"Message\"\n                value={newMessage.text}\n                onChange={(e) => setNewMessage({ ...newMessage, text: e.target.value })}\n              />\n              <button onClick={postMessage}>Post Message</button>\n            </div>\n            {/* Lista över meddelanden */}\n            <ul className=\"container\">\n              {messages.map((message) => (\n                <li key={message.id.S} className=\"list-container\">\n                  <p className=\"message-message\">{message.text.S}</p>\n                  <p className=\"message-user\">- {message.username.S}</p>\n                  <div className=\"button-div\">\n                    <button onClick={() => prepareEdit(message)}>Edit</button>\n                  </div>\n                </li>\n              ))}\n            </ul>\n          </div>\n        ) : (\n          <div>\n            {/* Formulär för att redigera ett meddelande */}\n            <h2>Edit Message</h2>\n            <textarea\n              value={editMessage.text}\n              onChange={(e) => setEditMessage({ ...editMessage, text: e.target.value })}\n            />\n            <button onClick={() => updateMessage(editMessage.id, editMessage.createdAt, editMessage.text)}>Update Message</button>\n            <button onClick={goToCreateMode}>Back to Create</button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './App.css'\n\n// // Ange din API-bas-URL\n// const apiBaseUrl = 'https://4m1f9x7927.execute-api.eu-north-1.amazonaws.com/dev';\n\n// function App() {\n//   // State för att lagra meddelanden och formulärdata\n//   const [messages, setMessages] = useState([]);\n//   const [newMessage, setNewMessage] = useState({ username: '', text: '' });\n//   const [editMessage, setEditMessage] = useState({ id: '', createdAt: '', text: '' }); // State för redigering\n\n//   // Hämtar meddelanden när komponenten laddas\n//   useEffect(() => {\n//     fetchMessages();\n//   }, []);\n\n//   const fetchMessages = async () => {\n//     try {\n//       const response = await axios.get(`${apiBaseUrl}/messages`);\n  \n//       // Sortera meddelandena baserat på createdAt i fallande ordning\n//       const sortedMessages = response.data.sort((a, b) => {\n//         return parseInt(b.createdAt.N) - parseInt(a.createdAt.N);\n//       });\n  \n//       setMessages(sortedMessages);\n//     } catch (error) {\n//       console.error('Error fetching messages:', error);\n//     }\n//   };\n\n//   // Funktion för att skicka ett nytt meddelande\n//   const postMessage = async () => {\n//     try {\n//       await axios.post(`${apiBaseUrl}/messages`, newMessage);\n//       fetchMessages(); // Uppdatera listan med meddelanden efter att ett nytt har skickats\n//       setNewMessage({ username: '', text: '' }); // Återställ inmatningsfälten\n//     } catch (error) {\n//       console.error('Error posting message:', error);\n//     }\n//   };\n\n//   // Funktion för att förbereda redigering av ett meddelande\n//   const prepareEdit = (message) => {\n//     setEditMessage({\n//       id: message.id.S,\n//       createdAt: message.createdAt.N,\n//       text: message.text.S,\n//     });\n//   };\n\n//   // Funktion för att uppdatera ett meddelande\n//   const updateMessage = async (id, createdAt, currentText) => {\n//     // Visa prompt med nuvarande text\n//     const updatedText = prompt('Ange ny text för meddelandet:', currentText);\n    \n//     if (updatedText && updatedText !== currentText) {\n//       try {\n//         // Skicka PUT-anropet med rätt ID, createdAt och uppdaterad text\n//         await axios.put(`${apiBaseUrl}/messages/${id}`, {\n//           id: id, // Skicka med ID\n//           createdAt: createdAt, // Skicka med createdAt\n//           text: updatedText // Den nya texten som ska uppdateras\n//         });\n//         fetchMessages(); // Uppdatera listan med meddelanden efter uppdatering\n//       } catch (error) {\n//         console.error('Error updating message:', error);\n//       }\n//     }\n//   };\n\n//   return (\n//     <div className=\"style-container\">\n//       <div className=\"cont\">\n//         <h1>Message Board</h1>\n\n//         {/* Lista över meddelanden */}\n//         <ul className=\"container\">\n//               {messages.map((message) => (\n//                 <li key={message.id.S} className=\"list-container\">\n//                   <p className=\"message-message\">{message.text.S}</p>\n//                   <p className=\"message-user\">- {message.username.S}</p>\n//                   <div className=\"button-div\">\n//                     <button \n//                       onClick={() => updateMessage(\n//                         message.id.S, \n//                         message.createdAt.N, \n//                         message.text.S\n//                       )}\n//                     >\n//                       Edit\n//                     </button>\n//                   </div>\n//                 </li>     \n//               ))}\n//         </ul>\n\n//         {/* Formulär för att redigera ett meddelande */}\n//         {editMessage.id && (\n//           <div>\n//             <h2>Edit Message</h2>\n//             <textarea\n//               value={editMessage.text}\n//               onChange={(e) => setEditMessage({ ...editMessage, text: e.target.value })}\n//             />\n//             <button onClick={updateMessage}>Update Message</button>\n//           </div>\n//         )}\n        \n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}