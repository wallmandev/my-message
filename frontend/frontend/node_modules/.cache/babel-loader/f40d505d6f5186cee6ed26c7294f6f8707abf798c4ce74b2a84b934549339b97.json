{"ast":null,"code":"import React,{useState,useEffect}from'react';import axios from'axios';import'./App.css';import{useNavigate}from'react-router-dom';// Ange din API-bas-URL\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const apiBaseUrl='https://4m1f9x7927.execute-api.eu-north-1.amazonaws.com/dev';function App(){// State för att lagra meddelanden och formulärdata\nconst[messages,setMessages]=useState([]);const[newMessage,setNewMessage]=useState({username:'',text:''});const[editMessage,setEditMessage]=useState({id:'',createdAt:'',text:''});// State för redigering\n// Hämtar meddelanden när komponenten laddas\nuseEffect(()=>{fetchMessages();},[]);const fetchMessages=async()=>{try{const response=await axios.get(`${apiBaseUrl}/messages`);// Sortera meddelandena baserat på createdAt i fallande ordning\nconst sortedMessages=response.data.sort((a,b)=>{return parseInt(b.createdAt.N)-parseInt(a.createdAt.N);});setMessages(sortedMessages);}catch(error){console.error('Error fetching messages:',error);}};// Funktion för att skicka ett nytt meddelande\nconst postMessage=async()=>{try{await axios.post(`${apiBaseUrl}/messages`,newMessage);fetchMessages();// Uppdatera listan med meddelanden efter att ett nytt har skickats\nsetNewMessage({username:'',text:''});// Återställ inmatningsfälten\n}catch(error){console.error('Error posting message:',error);}};// Funktion för att förbereda redigering av ett meddelande\nconst prepareEdit=message=>{setEditMessage({id:message.id.S,createdAt:message.createdAt.N,text:message.text.S});};// Funktion för att uppdatera ett meddelande\nconst updateMessage=async(id,createdAt,currentText)=>{// Visa prompt med nuvarande text\nconst updatedText=prompt('Ange ny text för meddelandet:',currentText);if(updatedText&&updatedText!==currentText){try{// Skicka PUT-anropet med rätt ID, createdAt och uppdaterad text\nawait axios.put(`${apiBaseUrl}/messages/${id}`,{id:id,// Skicka med ID\ncreatedAt:createdAt,// Skicka med createdAt\ntext:updatedText// Den nya texten som ska uppdateras\n});fetchMessages();// Uppdatera listan med meddelanden efter uppdatering\n}catch(error){console.error('Error updating message:',error);}}};return/*#__PURE__*/_jsx(\"div\",{className:\"style-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"cont\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Message Board\"}),/*#__PURE__*/_jsx(YourComponent,{}),/*#__PURE__*/_jsx(\"ul\",{className:\"container\",children:messages.map(message=>/*#__PURE__*/_jsxs(\"li\",{className:\"list-container\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"message-message\",children:message.text.S}),/*#__PURE__*/_jsxs(\"p\",{className:\"message-user\",children:[\"- \",message.username.S]}),/*#__PURE__*/_jsx(\"div\",{className:\"button-div\",children:/*#__PURE__*/_jsx(\"button\",{onClick:()=>updateMessage(message.id.S,message.createdAt.N,message.text.S),children:\"Edit\"})})]},message.id.S))}),editMessage.id&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Edit Message\"}),/*#__PURE__*/_jsx(\"textarea\",{value:editMessage.text,onChange:e=>setEditMessage({...editMessage,text:e.target.value})}),/*#__PURE__*/_jsx(\"button\",{onClick:updateMessage,children:\"Update Message\"})]})]})});}// Flytta YourComponent utanför App-komponenten\nfunction YourComponent(){const navigate=useNavigate();const goBackToHome=()=>{navigate('/');// Navigera till startsidan\n};return/*#__PURE__*/_jsx(\"button\",{onClick:goBackToHome,className:\"Backtohome-button\",children:\"Back to Home\"});}export default App;// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './App.css'\n// import { useNavigate } from 'react-router-dom';\n// // Ange din API-bas-URL\n// const apiBaseUrl = 'https://4m1f9x7927.execute-api.eu-north-1.amazonaws.com/dev';\n// function App() {\n//   // State för att lagra meddelanden och formulärdata\n//   const [messages, setMessages] = useState([]);\n//   const [newMessage, setNewMessage] = useState({ username: '', text: '' });\n//   const [editMessage, setEditMessage] = useState({ id: '', createdAt: '', text: '' }); // State för redigering\n//   // Hämtar meddelanden när komponenten laddas\n//   useEffect(() => {\n//     fetchMessages();\n//   }, []);\n//   const fetchMessages = async () => {\n//     try {\n//       const response = await axios.get(`${apiBaseUrl}/messages`);\n//       // Sortera meddelandena baserat på createdAt i fallande ordning\n//       const sortedMessages = response.data.sort((a, b) => {\n//         return parseInt(b.createdAt.N) - parseInt(a.createdAt.N);\n//       });\n//       setMessages(sortedMessages);\n//     } catch (error) {\n//       console.error('Error fetching messages:', error);\n//     }\n//   };\n//   // Funktion för att skicka ett nytt meddelande\n//   const postMessage = async () => {\n//     try {\n//       await axios.post(`${apiBaseUrl}/messages`, newMessage);\n//       fetchMessages(); // Uppdatera listan med meddelanden efter att ett nytt har skickats\n//       setNewMessage({ username: '', text: '' }); // Återställ inmatningsfälten\n//     } catch (error) {\n//       console.error('Error posting message:', error);\n//     }\n//   };\n//   // Funktion för att förbereda redigering av ett meddelande\n//   const prepareEdit = (message) => {\n//     setEditMessage({\n//       id: message.id.S,\n//       createdAt: message.createdAt.N,\n//       text: message.text.S,\n//     });\n//   };\n//   // Funktion för att uppdatera ett meddelande\n//   const updateMessage = async (id, createdAt, currentText) => {\n//     // Visa prompt med nuvarande text\n//     const updatedText = prompt('Ange ny text för meddelandet:', currentText);\n//     if (updatedText && updatedText !== currentText) {\n//       try {\n//         // Skicka PUT-anropet med rätt ID, createdAt och uppdaterad text\n//         await axios.put(`${apiBaseUrl}/messages/${id}`, {\n//           id: id, // Skicka med ID\n//           createdAt: createdAt, // Skicka med createdAt\n//           text: updatedText // Den nya texten som ska uppdateras\n//         });\n//         fetchMessages(); // Uppdatera listan med meddelanden efter uppdatering\n//       } catch (error) {\n//         console.error('Error updating message:', error);\n//       }\n//     }\n//   };\n//   return (\n//     <div className=\"style-container\">\n//       <div className=\"cont\">\n//         <h1>Message Board</h1>\n//         {/* Lista över meddelanden */}\n//         <ul className=\"container\">\n//               {messages.map((message) => (\n//                 <li key={message.id.S} className=\"list-container\">\n//                   <p className=\"message-message\">{message.text.S}</p>\n//                   <p className=\"message-user\">- {message.username.S}</p>\n//                   <div className=\"button-div\">\n//                     <button \n//                       onClick={() => updateMessage(\n//                         message.id.S, \n//                         message.createdAt.N, \n//                         message.text.S\n//                       )}\n//                     >\n//                       Edit\n//                     </button>\n//                   </div>\n//                 </li>     \n//               ))}\n//         </ul>\n//         {/* Formulär för att redigera ett meddelande */}\n//         {editMessage.id && (\n//           <div>\n//             <h2>Edit Message</h2>\n//             <textarea\n//               value={editMessage.text}\n//               onChange={(e) => setEditMessage({ ...editMessage, text: e.target.value })}\n//             />\n//             <button onClick={updateMessage}>Update Message</button>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n// function YourComponent() {\n//   const navigate = useNavigate();\n//   const goBackToHome = () => {\n//     navigate('/'); // Navigera till startsidan\n//   };\n//   return (\n//     <button onClick={goBackToHome}>\n//       Back to Home\n//     </button>\n//   );\n// }\n// export default App;","map":{"version":3,"names":["React","useState","useEffect","axios","useNavigate","jsx","_jsx","jsxs","_jsxs","apiBaseUrl","App","messages","setMessages","newMessage","setNewMessage","username","text","editMessage","setEditMessage","id","createdAt","fetchMessages","response","get","sortedMessages","data","sort","a","b","parseInt","N","error","console","postMessage","post","prepareEdit","message","S","updateMessage","currentText","updatedText","prompt","put","className","children","YourComponent","map","onClick","value","onChange","e","target","navigate","goBackToHome"],"sources":["/Users/christofferwallman/message-board/frontend/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css'\nimport { useNavigate } from 'react-router-dom';\n\n// Ange din API-bas-URL\nconst apiBaseUrl = 'https://4m1f9x7927.execute-api.eu-north-1.amazonaws.com/dev';\n\nfunction App() {\n  // State för att lagra meddelanden och formulärdata\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState({ username: '', text: '' });\n  const [editMessage, setEditMessage] = useState({ id: '', createdAt: '', text: '' }); // State för redigering\n\n  // Hämtar meddelanden när komponenten laddas\n  useEffect(() => {\n    fetchMessages();\n  }, []);\n\n  const fetchMessages = async () => {\n    try {\n      const response = await axios.get(`${apiBaseUrl}/messages`);\n  \n      // Sortera meddelandena baserat på createdAt i fallande ordning\n      const sortedMessages = response.data.sort((a, b) => {\n        return parseInt(b.createdAt.N) - parseInt(a.createdAt.N);\n      });\n  \n      setMessages(sortedMessages);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n\n  // Funktion för att skicka ett nytt meddelande\n  const postMessage = async () => {\n    try {\n      await axios.post(`${apiBaseUrl}/messages`, newMessage);\n      fetchMessages(); // Uppdatera listan med meddelanden efter att ett nytt har skickats\n      setNewMessage({ username: '', text: '' }); // Återställ inmatningsfälten\n    } catch (error) {\n      console.error('Error posting message:', error);\n    }\n  };\n\n  // Funktion för att förbereda redigering av ett meddelande\n  const prepareEdit = (message) => {\n    setEditMessage({\n      id: message.id.S,\n      createdAt: message.createdAt.N,\n      text: message.text.S,\n    });\n  };\n\n  // Funktion för att uppdatera ett meddelande\n  const updateMessage = async (id, createdAt, currentText) => {\n    // Visa prompt med nuvarande text\n    const updatedText = prompt('Ange ny text för meddelandet:', currentText);\n    \n    if (updatedText && updatedText !== currentText) {\n      try {\n        // Skicka PUT-anropet med rätt ID, createdAt och uppdaterad text\n        await axios.put(`${apiBaseUrl}/messages/${id}`, {\n          id: id, // Skicka med ID\n          createdAt: createdAt, // Skicka med createdAt\n          text: updatedText // Den nya texten som ska uppdateras\n        });\n        fetchMessages(); // Uppdatera listan med meddelanden efter uppdatering\n      } catch (error) {\n        console.error('Error updating message:', error);\n      }\n    }\n  };\n\n  return (\n    <div className=\"style-container\">\n      <div className=\"cont\">\n        <h1>Message Board</h1>\n\n        <YourComponent />\n\n        {/* Lista över meddelanden */}\n        <ul className=\"container\">\n          {messages.map((message) => (\n            <li key={message.id.S} className=\"list-container\">\n              <p className=\"message-message\">{message.text.S}</p>\n              <p className=\"message-user\">- {message.username.S}</p>\n              <div className=\"button-div\">\n                <button \n                  onClick={() => updateMessage(\n                    message.id.S, \n                    message.createdAt.N, \n                    message.text.S\n                  )}\n                >\n                  Edit\n                </button>\n              </div>\n            </li>     \n          ))}\n        </ul>\n\n        {/* Formulär för att redigera ett meddelande */}\n        {editMessage.id && (\n          <div>\n            <h2>Edit Message</h2>\n            <textarea\n              value={editMessage.text}\n              onChange={(e) => setEditMessage({ ...editMessage, text: e.target.value })}\n            />\n            <button onClick={updateMessage}>Update Message</button>\n          </div>\n        )}\n        \n      </div>\n    </div>\n  );\n}\n\n// Flytta YourComponent utanför App-komponenten\nfunction YourComponent() {\n  const navigate = useNavigate();\n\n  const goBackToHome = () => {\n    navigate('/'); // Navigera till startsidan\n  };\n\n  return (\n    <button onClick={goBackToHome} className=\"Backtohome-button\">\n      Back to Home\n    </button>\n  );\n}\n\nexport default App;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './App.css'\n// import { useNavigate } from 'react-router-dom';\n\n// // Ange din API-bas-URL\n// const apiBaseUrl = 'https://4m1f9x7927.execute-api.eu-north-1.amazonaws.com/dev';\n\n// function App() {\n//   // State för att lagra meddelanden och formulärdata\n//   const [messages, setMessages] = useState([]);\n//   const [newMessage, setNewMessage] = useState({ username: '', text: '' });\n//   const [editMessage, setEditMessage] = useState({ id: '', createdAt: '', text: '' }); // State för redigering\n\n//   // Hämtar meddelanden när komponenten laddas\n//   useEffect(() => {\n//     fetchMessages();\n//   }, []);\n\n//   const fetchMessages = async () => {\n//     try {\n//       const response = await axios.get(`${apiBaseUrl}/messages`);\n  \n//       // Sortera meddelandena baserat på createdAt i fallande ordning\n//       const sortedMessages = response.data.sort((a, b) => {\n//         return parseInt(b.createdAt.N) - parseInt(a.createdAt.N);\n//       });\n  \n//       setMessages(sortedMessages);\n//     } catch (error) {\n//       console.error('Error fetching messages:', error);\n//     }\n//   };\n\n//   // Funktion för att skicka ett nytt meddelande\n//   const postMessage = async () => {\n//     try {\n//       await axios.post(`${apiBaseUrl}/messages`, newMessage);\n//       fetchMessages(); // Uppdatera listan med meddelanden efter att ett nytt har skickats\n//       setNewMessage({ username: '', text: '' }); // Återställ inmatningsfälten\n//     } catch (error) {\n//       console.error('Error posting message:', error);\n//     }\n//   };\n\n//   // Funktion för att förbereda redigering av ett meddelande\n//   const prepareEdit = (message) => {\n//     setEditMessage({\n//       id: message.id.S,\n//       createdAt: message.createdAt.N,\n//       text: message.text.S,\n//     });\n//   };\n\n//   // Funktion för att uppdatera ett meddelande\n//   const updateMessage = async (id, createdAt, currentText) => {\n//     // Visa prompt med nuvarande text\n//     const updatedText = prompt('Ange ny text för meddelandet:', currentText);\n    \n//     if (updatedText && updatedText !== currentText) {\n//       try {\n//         // Skicka PUT-anropet med rätt ID, createdAt och uppdaterad text\n//         await axios.put(`${apiBaseUrl}/messages/${id}`, {\n//           id: id, // Skicka med ID\n//           createdAt: createdAt, // Skicka med createdAt\n//           text: updatedText // Den nya texten som ska uppdateras\n//         });\n//         fetchMessages(); // Uppdatera listan med meddelanden efter uppdatering\n//       } catch (error) {\n//         console.error('Error updating message:', error);\n//       }\n//     }\n//   };\n\n//   return (\n//     <div className=\"style-container\">\n//       <div className=\"cont\">\n//         <h1>Message Board</h1>\n\n//         {/* Lista över meddelanden */}\n//         <ul className=\"container\">\n//               {messages.map((message) => (\n//                 <li key={message.id.S} className=\"list-container\">\n//                   <p className=\"message-message\">{message.text.S}</p>\n//                   <p className=\"message-user\">- {message.username.S}</p>\n//                   <div className=\"button-div\">\n//                     <button \n//                       onClick={() => updateMessage(\n//                         message.id.S, \n//                         message.createdAt.N, \n//                         message.text.S\n//                       )}\n//                     >\n//                       Edit\n//                     </button>\n//                   </div>\n//                 </li>     \n//               ))}\n//         </ul>\n\n//         {/* Formulär för att redigera ett meddelande */}\n//         {editMessage.id && (\n//           <div>\n//             <h2>Edit Message</h2>\n//             <textarea\n//               value={editMessage.text}\n//               onChange={(e) => setEditMessage({ ...editMessage, text: e.target.value })}\n//             />\n//             <button onClick={updateMessage}>Update Message</button>\n//           </div>\n//         )}\n        \n//       </div>\n//     </div>\n//   );\n// }\n// function YourComponent() {\n//   const navigate = useNavigate();\n\n//   const goBackToHome = () => {\n//     navigate('/'); // Navigera till startsidan\n//   };\n\n//   return (\n//     <button onClick={goBackToHome}>\n//       Back to Home\n//     </button>\n//   );\n// }\n\n// export default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,CAAAC,KAAK,KAAM,OAAO,CACzB,MAAO,WAAW,CAClB,OAASC,WAAW,KAAQ,kBAAkB,CAE9C;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBACA,KAAM,CAAAC,UAAU,CAAG,6DAA6D,CAEhF,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb;AACA,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACY,UAAU,CAAEC,aAAa,CAAC,CAAGb,QAAQ,CAAC,CAAEc,QAAQ,CAAE,EAAE,CAAEC,IAAI,CAAE,EAAG,CAAC,CAAC,CACxE,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGjB,QAAQ,CAAC,CAAEkB,EAAE,CAAE,EAAE,CAAEC,SAAS,CAAE,EAAE,CAAEJ,IAAI,CAAE,EAAG,CAAC,CAAC,CAAE;AAErF;AACAd,SAAS,CAAC,IAAM,CACdmB,aAAa,CAAC,CAAC,CACjB,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAA,aAAa,CAAG,KAAAA,CAAA,GAAY,CAChC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAnB,KAAK,CAACoB,GAAG,CAAC,GAAGd,UAAU,WAAW,CAAC,CAE1D;AACA,KAAM,CAAAe,cAAc,CAAGF,QAAQ,CAACG,IAAI,CAACC,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAK,CAClD,MAAO,CAAAC,QAAQ,CAACD,CAAC,CAACR,SAAS,CAACU,CAAC,CAAC,CAAGD,QAAQ,CAACF,CAAC,CAACP,SAAS,CAACU,CAAC,CAAC,CAC1D,CAAC,CAAC,CAEFlB,WAAW,CAACY,cAAc,CAAC,CAC7B,CAAE,MAAOO,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAClD,CACF,CAAC,CAED;AACA,KAAM,CAAAE,WAAW,CAAG,KAAAA,CAAA,GAAY,CAC9B,GAAI,CACF,KAAM,CAAA9B,KAAK,CAAC+B,IAAI,CAAC,GAAGzB,UAAU,WAAW,CAAEI,UAAU,CAAC,CACtDQ,aAAa,CAAC,CAAC,CAAE;AACjBP,aAAa,CAAC,CAAEC,QAAQ,CAAE,EAAE,CAAEC,IAAI,CAAE,EAAG,CAAC,CAAC,CAAE;AAC7C,CAAE,MAAOe,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAChD,CACF,CAAC,CAED;AACA,KAAM,CAAAI,WAAW,CAAIC,OAAO,EAAK,CAC/BlB,cAAc,CAAC,CACbC,EAAE,CAAEiB,OAAO,CAACjB,EAAE,CAACkB,CAAC,CAChBjB,SAAS,CAAEgB,OAAO,CAAChB,SAAS,CAACU,CAAC,CAC9Bd,IAAI,CAAEoB,OAAO,CAACpB,IAAI,CAACqB,CACrB,CAAC,CAAC,CACJ,CAAC,CAED;AACA,KAAM,CAAAC,aAAa,CAAG,KAAAA,CAAOnB,EAAE,CAAEC,SAAS,CAAEmB,WAAW,GAAK,CAC1D;AACA,KAAM,CAAAC,WAAW,CAAGC,MAAM,CAAC,+BAA+B,CAAEF,WAAW,CAAC,CAExE,GAAIC,WAAW,EAAIA,WAAW,GAAKD,WAAW,CAAE,CAC9C,GAAI,CACF;AACA,KAAM,CAAApC,KAAK,CAACuC,GAAG,CAAC,GAAGjC,UAAU,aAAaU,EAAE,EAAE,CAAE,CAC9CA,EAAE,CAAEA,EAAE,CAAE;AACRC,SAAS,CAAEA,SAAS,CAAE;AACtBJ,IAAI,CAAEwB,WAAY;AACpB,CAAC,CAAC,CACFnB,aAAa,CAAC,CAAC,CAAE;AACnB,CAAE,MAAOU,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CACjD,CACF,CACF,CAAC,CAED,mBACEzB,IAAA,QAAKqC,SAAS,CAAC,iBAAiB,CAAAC,QAAA,cAC9BpC,KAAA,QAAKmC,SAAS,CAAC,MAAM,CAAAC,QAAA,eACnBtC,IAAA,OAAAsC,QAAA,CAAI,eAAa,CAAI,CAAC,cAEtBtC,IAAA,CAACuC,aAAa,GAAE,CAAC,cAGjBvC,IAAA,OAAIqC,SAAS,CAAC,WAAW,CAAAC,QAAA,CACtBjC,QAAQ,CAACmC,GAAG,CAAEV,OAAO,eACpB5B,KAAA,OAAuBmC,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC/CtC,IAAA,MAAGqC,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAAER,OAAO,CAACpB,IAAI,CAACqB,CAAC,CAAI,CAAC,cACnD7B,KAAA,MAAGmC,SAAS,CAAC,cAAc,CAAAC,QAAA,EAAC,IAAE,CAACR,OAAO,CAACrB,QAAQ,CAACsB,CAAC,EAAI,CAAC,cACtD/B,IAAA,QAAKqC,SAAS,CAAC,YAAY,CAAAC,QAAA,cACzBtC,IAAA,WACEyC,OAAO,CAAEA,CAAA,GAAMT,aAAa,CAC1BF,OAAO,CAACjB,EAAE,CAACkB,CAAC,CACZD,OAAO,CAAChB,SAAS,CAACU,CAAC,CACnBM,OAAO,CAACpB,IAAI,CAACqB,CACf,CAAE,CAAAO,QAAA,CACH,MAED,CAAQ,CAAC,CACN,CAAC,GAbCR,OAAO,CAACjB,EAAE,CAACkB,CAchB,CACL,CAAC,CACA,CAAC,CAGJpB,WAAW,CAACE,EAAE,eACbX,KAAA,QAAAoC,QAAA,eACEtC,IAAA,OAAAsC,QAAA,CAAI,cAAY,CAAI,CAAC,cACrBtC,IAAA,aACE0C,KAAK,CAAE/B,WAAW,CAACD,IAAK,CACxBiC,QAAQ,CAAGC,CAAC,EAAKhC,cAAc,CAAC,CAAE,GAAGD,WAAW,CAAED,IAAI,CAAEkC,CAAC,CAACC,MAAM,CAACH,KAAM,CAAC,CAAE,CAC3E,CAAC,cACF1C,IAAA,WAAQyC,OAAO,CAAET,aAAc,CAAAM,QAAA,CAAC,gBAAc,CAAQ,CAAC,EACpD,CACN,EAEE,CAAC,CACH,CAAC,CAEV,CAEA;AACA,QAAS,CAAAC,aAAaA,CAAA,CAAG,CACvB,KAAM,CAAAO,QAAQ,CAAGhD,WAAW,CAAC,CAAC,CAE9B,KAAM,CAAAiD,YAAY,CAAGA,CAAA,GAAM,CACzBD,QAAQ,CAAC,GAAG,CAAC,CAAE;AACjB,CAAC,CAED,mBACE9C,IAAA,WAAQyC,OAAO,CAAEM,YAAa,CAACV,SAAS,CAAC,mBAAmB,CAAAC,QAAA,CAAC,cAE7D,CAAQ,CAAC,CAEb,CAEA,cAAe,CAAAlC,GAAG,CAElignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}