import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { APIGatewayServiceException as __BaseException } from "./APIGatewayServiceException";
export interface AccessLogSettings {
  format?: string;
  destinationArn?: string;
}
export interface ThrottleSettings {
  burstLimit?: number;
  rateLimit?: number;
}
export interface Account {
  cloudwatchRoleArn?: string;
  throttleSettings?: ThrottleSettings;
  features?: string[];
  apiKeyVersion?: string;
}
export interface ApiKey {
  id?: string;
  value?: string;
  name?: string;
  customerId?: string;
  description?: string;
  enabled?: boolean;
  createdDate?: Date;
  lastUpdatedDate?: Date;
  stageKeys?: string[];
  tags?: Record<string, string>;
}
export interface ApiKeyIds {
  ids?: string[];
  warnings?: string[];
}
export interface ApiKeys {
  warnings?: string[];
  items?: ApiKey[];
  position?: string;
}
export declare const ApiKeysFormat: {
  readonly csv: "csv";
};
export type ApiKeysFormat = (typeof ApiKeysFormat)[keyof typeof ApiKeysFormat];
export declare const ApiKeySourceType: {
  readonly AUTHORIZER: "AUTHORIZER";
  readonly HEADER: "HEADER";
};
export type ApiKeySourceType =
  (typeof ApiKeySourceType)[keyof typeof ApiKeySourceType];
export interface ApiStage {
  apiId?: string;
  stage?: string;
  throttle?: Record<string, ThrottleSettings>;
}
export declare const AuthorizerType: {
  readonly COGNITO_USER_POOLS: "COGNITO_USER_POOLS";
  readonly REQUEST: "REQUEST";
  readonly TOKEN: "TOKEN";
};
export type AuthorizerType =
  (typeof AuthorizerType)[keyof typeof AuthorizerType];
export interface Authorizer {
  id?: string;
  name?: string;
  type?: AuthorizerType;
  providerARNs?: string[];
  authType?: string;
  authorizerUri?: string;
  authorizerCredentials?: string;
  identitySource?: string;
  identityValidationExpression?: string;
  authorizerResultTtlInSeconds?: number;
}
export interface Authorizers {
  items?: Authorizer[];
  position?: string;
}
export declare class BadRequestException extends __BaseException {
  readonly name: "BadRequestException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<BadRequestException, __BaseException>
  );
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface StageKey {
  restApiId?: string;
  stageName?: string;
}
export interface CreateApiKeyRequest {
  name?: string;
  description?: string;
  enabled?: boolean;
  generateDistinctId?: boolean;
  value?: string;
  stageKeys?: StageKey[];
  customerId?: string;
  tags?: Record<string, string>;
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  retryAfterSeconds?: string;
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class NotFoundException extends __BaseException {
  readonly name: "NotFoundException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
}
export declare class TooManyRequestsException extends __BaseException {
  readonly name: "TooManyRequestsException";
  readonly $fault: "client";
  retryAfterSeconds?: string;
  constructor(
    opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>
  );
}
export declare class UnauthorizedException extends __BaseException {
  readonly name: "UnauthorizedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<UnauthorizedException, __BaseException>
  );
}
export interface CreateAuthorizerRequest {
  restApiId: string | undefined;
  name: string | undefined;
  type: AuthorizerType | undefined;
  providerARNs?: string[];
  authType?: string;
  authorizerUri?: string;
  authorizerCredentials?: string;
  identitySource?: string;
  identityValidationExpression?: string;
  authorizerResultTtlInSeconds?: number;
}
export interface BasePathMapping {
  basePath?: string;
  restApiId?: string;
  stage?: string;
}
export interface CreateBasePathMappingRequest {
  domainName: string | undefined;
  basePath?: string;
  restApiId: string | undefined;
  stage?: string;
}
export declare const CacheClusterSize: {
  readonly SIZE_0_POINT_5_GB: "0.5";
  readonly SIZE_118_GB: "118";
  readonly SIZE_13_POINT_5_GB: "13.5";
  readonly SIZE_1_POINT_6_GB: "1.6";
  readonly SIZE_237_GB: "237";
  readonly SIZE_28_POINT_4_GB: "28.4";
  readonly SIZE_58_POINT_2_GB: "58.2";
  readonly SIZE_6_POINT_1_GB: "6.1";
};
export type CacheClusterSize =
  (typeof CacheClusterSize)[keyof typeof CacheClusterSize];
export interface DeploymentCanarySettings {
  percentTraffic?: number;
  stageVariableOverrides?: Record<string, string>;
  useStageCache?: boolean;
}
export interface CreateDeploymentRequest {
  restApiId: string | undefined;
  stageName?: string;
  stageDescription?: string;
  description?: string;
  cacheClusterEnabled?: boolean;
  cacheClusterSize?: CacheClusterSize;
  variables?: Record<string, string>;
  canarySettings?: DeploymentCanarySettings;
  tracingEnabled?: boolean;
}
export interface MethodSnapshot {
  authorizationType?: string;
  apiKeyRequired?: boolean;
}
export interface Deployment {
  id?: string;
  description?: string;
  createdDate?: Date;
  apiSummary?: Record<string, Record<string, MethodSnapshot>>;
}
export declare class ServiceUnavailableException extends __BaseException {
  readonly name: "ServiceUnavailableException";
  readonly $fault: "server";
  retryAfterSeconds?: string;
  constructor(
    opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>
  );
}
export declare const DocumentationPartType: {
  readonly API: "API";
  readonly AUTHORIZER: "AUTHORIZER";
  readonly METHOD: "METHOD";
  readonly MODEL: "MODEL";
  readonly PATH_PARAMETER: "PATH_PARAMETER";
  readonly QUERY_PARAMETER: "QUERY_PARAMETER";
  readonly REQUEST_BODY: "REQUEST_BODY";
  readonly REQUEST_HEADER: "REQUEST_HEADER";
  readonly RESOURCE: "RESOURCE";
  readonly RESPONSE: "RESPONSE";
  readonly RESPONSE_BODY: "RESPONSE_BODY";
  readonly RESPONSE_HEADER: "RESPONSE_HEADER";
};
export type DocumentationPartType =
  (typeof DocumentationPartType)[keyof typeof DocumentationPartType];
export interface DocumentationPartLocation {
  type: DocumentationPartType | undefined;
  path?: string;
  method?: string;
  statusCode?: string;
  name?: string;
}
export interface CreateDocumentationPartRequest {
  restApiId: string | undefined;
  location: DocumentationPartLocation | undefined;
  properties: string | undefined;
}
export interface DocumentationPart {
  id?: string;
  location?: DocumentationPartLocation;
  properties?: string;
}
export interface CreateDocumentationVersionRequest {
  restApiId: string | undefined;
  documentationVersion: string | undefined;
  stageName?: string;
  description?: string;
}
export interface DocumentationVersion {
  version?: string;
  createdDate?: Date;
  description?: string;
}
export declare const EndpointType: {
  readonly EDGE: "EDGE";
  readonly PRIVATE: "PRIVATE";
  readonly REGIONAL: "REGIONAL";
};
export type EndpointType = (typeof EndpointType)[keyof typeof EndpointType];
export interface EndpointConfiguration {
  types?: EndpointType[];
  vpcEndpointIds?: string[];
}
export interface MutualTlsAuthenticationInput {
  truststoreUri?: string;
  truststoreVersion?: string;
}
export declare const SecurityPolicy: {
  readonly TLS_1_0: "TLS_1_0";
  readonly TLS_1_2: "TLS_1_2";
};
export type SecurityPolicy =
  (typeof SecurityPolicy)[keyof typeof SecurityPolicy];
export interface CreateDomainNameRequest {
  domainName: string | undefined;
  certificateName?: string;
  certificateBody?: string;
  certificatePrivateKey?: string;
  certificateChain?: string;
  certificateArn?: string;
  regionalCertificateName?: string;
  regionalCertificateArn?: string;
  endpointConfiguration?: EndpointConfiguration;
  tags?: Record<string, string>;
  securityPolicy?: SecurityPolicy;
  mutualTlsAuthentication?: MutualTlsAuthenticationInput;
  ownershipVerificationCertificateArn?: string;
}
export declare const DomainNameStatus: {
  readonly AVAILABLE: "AVAILABLE";
  readonly PENDING: "PENDING";
  readonly PENDING_CERTIFICATE_REIMPORT: "PENDING_CERTIFICATE_REIMPORT";
  readonly PENDING_OWNERSHIP_VERIFICATION: "PENDING_OWNERSHIP_VERIFICATION";
  readonly UPDATING: "UPDATING";
};
export type DomainNameStatus =
  (typeof DomainNameStatus)[keyof typeof DomainNameStatus];
export interface MutualTlsAuthentication {
  truststoreUri?: string;
  truststoreVersion?: string;
  truststoreWarnings?: string[];
}
export interface DomainName {
  domainName?: string;
  certificateName?: string;
  certificateArn?: string;
  certificateUploadDate?: Date;
  regionalDomainName?: string;
  regionalHostedZoneId?: string;
  regionalCertificateName?: string;
  regionalCertificateArn?: string;
  distributionDomainName?: string;
  distributionHostedZoneId?: string;
  endpointConfiguration?: EndpointConfiguration;
  domainNameStatus?: DomainNameStatus;
  domainNameStatusMessage?: string;
  securityPolicy?: SecurityPolicy;
  tags?: Record<string, string>;
  mutualTlsAuthentication?: MutualTlsAuthentication;
  ownershipVerificationCertificateArn?: string;
}
export interface CreateModelRequest {
  restApiId: string | undefined;
  name: string | undefined;
  description?: string;
  schema?: string;
  contentType: string | undefined;
}
export interface Model {
  id?: string;
  name?: string;
  description?: string;
  schema?: string;
  contentType?: string;
}
export interface CreateRequestValidatorRequest {
  restApiId: string | undefined;
  name?: string;
  validateRequestBody?: boolean;
  validateRequestParameters?: boolean;
}
export interface RequestValidator {
  id?: string;
  name?: string;
  validateRequestBody?: boolean;
  validateRequestParameters?: boolean;
}
export interface CreateResourceRequest {
  restApiId: string | undefined;
  parentId: string | undefined;
  pathPart: string | undefined;
}
export declare const ConnectionType: {
  readonly INTERNET: "INTERNET";
  readonly VPC_LINK: "VPC_LINK";
};
export type ConnectionType =
  (typeof ConnectionType)[keyof typeof ConnectionType];
export declare const ContentHandlingStrategy: {
  readonly CONVERT_TO_BINARY: "CONVERT_TO_BINARY";
  readonly CONVERT_TO_TEXT: "CONVERT_TO_TEXT";
};
export type ContentHandlingStrategy =
  (typeof ContentHandlingStrategy)[keyof typeof ContentHandlingStrategy];
export interface IntegrationResponse {
  statusCode?: string;
  selectionPattern?: string;
  responseParameters?: Record<string, string>;
  responseTemplates?: Record<string, string>;
  contentHandling?: ContentHandlingStrategy;
}
export interface TlsConfig {
  insecureSkipVerification?: boolean;
}
export declare const IntegrationType: {
  readonly AWS: "AWS";
  readonly AWS_PROXY: "AWS_PROXY";
  readonly HTTP: "HTTP";
  readonly HTTP_PROXY: "HTTP_PROXY";
  readonly MOCK: "MOCK";
};
export type IntegrationType =
  (typeof IntegrationType)[keyof typeof IntegrationType];
export interface Integration {
  type?: IntegrationType;
  httpMethod?: string;
  uri?: string;
  connectionType?: ConnectionType;
  connectionId?: string;
  credentials?: string;
  requestParameters?: Record<string, string>;
  requestTemplates?: Record<string, string>;
  passthroughBehavior?: string;
  contentHandling?: ContentHandlingStrategy;
  timeoutInMillis?: number;
  cacheNamespace?: string;
  cacheKeyParameters?: string[];
  integrationResponses?: Record<string, IntegrationResponse>;
  tlsConfig?: TlsConfig;
}
export interface MethodResponse {
  statusCode?: string;
  responseParameters?: Record<string, boolean>;
  responseModels?: Record<string, string>;
}
export interface Method {
  httpMethod?: string;
  authorizationType?: string;
  authorizerId?: string;
  apiKeyRequired?: boolean;
  requestValidatorId?: string;
  operationName?: string;
  requestParameters?: Record<string, boolean>;
  requestModels?: Record<string, string>;
  methodResponses?: Record<string, MethodResponse>;
  methodIntegration?: Integration;
  authorizationScopes?: string[];
}
export interface Resource {
  id?: string;
  parentId?: string;
  pathPart?: string;
  path?: string;
  resourceMethods?: Record<string, Method>;
}
export interface CreateRestApiRequest {
  name: string | undefined;
  description?: string;
  version?: string;
  cloneFrom?: string;
  binaryMediaTypes?: string[];
  minimumCompressionSize?: number;
  apiKeySource?: ApiKeySourceType;
  endpointConfiguration?: EndpointConfiguration;
  policy?: string;
  tags?: Record<string, string>;
  disableExecuteApiEndpoint?: boolean;
}
export interface RestApi {
  id?: string;
  name?: string;
  description?: string;
  createdDate?: Date;
  version?: string;
  warnings?: string[];
  binaryMediaTypes?: string[];
  minimumCompressionSize?: number;
  apiKeySource?: ApiKeySourceType;
  endpointConfiguration?: EndpointConfiguration;
  policy?: string;
  tags?: Record<string, string>;
  disableExecuteApiEndpoint?: boolean;
  rootResourceId?: string;
}
export interface CanarySettings {
  percentTraffic?: number;
  deploymentId?: string;
  stageVariableOverrides?: Record<string, string>;
  useStageCache?: boolean;
}
export interface CreateStageRequest {
  restApiId: string | undefined;
  stageName: string | undefined;
  deploymentId: string | undefined;
  description?: string;
  cacheClusterEnabled?: boolean;
  cacheClusterSize?: CacheClusterSize;
  variables?: Record<string, string>;
  documentationVersion?: string;
  canarySettings?: CanarySettings;
  tracingEnabled?: boolean;
  tags?: Record<string, string>;
}
export declare const CacheClusterStatus: {
  readonly AVAILABLE: "AVAILABLE";
  readonly CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS";
  readonly DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS";
  readonly FLUSH_IN_PROGRESS: "FLUSH_IN_PROGRESS";
  readonly NOT_AVAILABLE: "NOT_AVAILABLE";
};
export type CacheClusterStatus =
  (typeof CacheClusterStatus)[keyof typeof CacheClusterStatus];
export declare const UnauthorizedCacheControlHeaderStrategy: {
  readonly FAIL_WITH_403: "FAIL_WITH_403";
  readonly SUCCEED_WITHOUT_RESPONSE_HEADER: "SUCCEED_WITHOUT_RESPONSE_HEADER";
  readonly SUCCEED_WITH_RESPONSE_HEADER: "SUCCEED_WITH_RESPONSE_HEADER";
};
export type UnauthorizedCacheControlHeaderStrategy =
  (typeof UnauthorizedCacheControlHeaderStrategy)[keyof typeof UnauthorizedCacheControlHeaderStrategy];
export interface MethodSetting {
  metricsEnabled?: boolean;
  loggingLevel?: string;
  dataTraceEnabled?: boolean;
  throttlingBurstLimit?: number;
  throttlingRateLimit?: number;
  cachingEnabled?: boolean;
  cacheTtlInSeconds?: number;
  cacheDataEncrypted?: boolean;
  requireAuthorizationForCacheControl?: boolean;
  unauthorizedCacheControlHeaderStrategy?: UnauthorizedCacheControlHeaderStrategy;
}
export interface Stage {
  deploymentId?: string;
  clientCertificateId?: string;
  stageName?: string;
  description?: string;
  cacheClusterEnabled?: boolean;
  cacheClusterSize?: CacheClusterSize;
  cacheClusterStatus?: CacheClusterStatus;
  methodSettings?: Record<string, MethodSetting>;
  variables?: Record<string, string>;
  documentationVersion?: string;
  accessLogSettings?: AccessLogSettings;
  canarySettings?: CanarySettings;
  tracingEnabled?: boolean;
  webAclArn?: string;
  tags?: Record<string, string>;
  createdDate?: Date;
  lastUpdatedDate?: Date;
}
export declare const QuotaPeriodType: {
  readonly DAY: "DAY";
  readonly MONTH: "MONTH";
  readonly WEEK: "WEEK";
};
export type QuotaPeriodType =
  (typeof QuotaPeriodType)[keyof typeof QuotaPeriodType];
export interface QuotaSettings {
  limit?: number;
  offset?: number;
  period?: QuotaPeriodType;
}
export interface CreateUsagePlanRequest {
  name: string | undefined;
  description?: string;
  apiStages?: ApiStage[];
  throttle?: ThrottleSettings;
  quota?: QuotaSettings;
  tags?: Record<string, string>;
}
export interface UsagePlan {
  id?: string;
  name?: string;
  description?: string;
  apiStages?: ApiStage[];
  throttle?: ThrottleSettings;
  quota?: QuotaSettings;
  productCode?: string;
  tags?: Record<string, string>;
}
export interface CreateUsagePlanKeyRequest {
  usagePlanId: string | undefined;
  keyId: string | undefined;
  keyType: string | undefined;
}
export interface UsagePlanKey {
  id?: string;
  type?: string;
  value?: string;
  name?: string;
}
export interface CreateVpcLinkRequest {
  name: string | undefined;
  description?: string;
  targetArns: string[] | undefined;
  tags?: Record<string, string>;
}
export declare const VpcLinkStatus: {
  readonly AVAILABLE: "AVAILABLE";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly PENDING: "PENDING";
};
export type VpcLinkStatus = (typeof VpcLinkStatus)[keyof typeof VpcLinkStatus];
export interface VpcLink {
  id?: string;
  name?: string;
  description?: string;
  targetArns?: string[];
  status?: VpcLinkStatus;
  statusMessage?: string;
  tags?: Record<string, string>;
}
export interface DeleteApiKeyRequest {
  apiKey: string | undefined;
}
export interface DeleteAuthorizerRequest {
  restApiId: string | undefined;
  authorizerId: string | undefined;
}
export interface DeleteBasePathMappingRequest {
  domainName: string | undefined;
  basePath: string | undefined;
}
export interface DeleteClientCertificateRequest {
  clientCertificateId: string | undefined;
}
export interface DeleteDeploymentRequest {
  restApiId: string | undefined;
  deploymentId: string | undefined;
}
export interface DeleteDocumentationPartRequest {
  restApiId: string | undefined;
  documentationPartId: string | undefined;
}
export interface DeleteDocumentationVersionRequest {
  restApiId: string | undefined;
  documentationVersion: string | undefined;
}
export interface DeleteDomainNameRequest {
  domainName: string | undefined;
}
export declare const GatewayResponseType: {
  readonly ACCESS_DENIED: "ACCESS_DENIED";
  readonly API_CONFIGURATION_ERROR: "API_CONFIGURATION_ERROR";
  readonly AUTHORIZER_CONFIGURATION_ERROR: "AUTHORIZER_CONFIGURATION_ERROR";
  readonly AUTHORIZER_FAILURE: "AUTHORIZER_FAILURE";
  readonly BAD_REQUEST_BODY: "BAD_REQUEST_BODY";
  readonly BAD_REQUEST_PARAMETERS: "BAD_REQUEST_PARAMETERS";
  readonly DEFAULT_4XX: "DEFAULT_4XX";
  readonly DEFAULT_5XX: "DEFAULT_5XX";
  readonly EXPIRED_TOKEN: "EXPIRED_TOKEN";
  readonly INTEGRATION_FAILURE: "INTEGRATION_FAILURE";
  readonly INTEGRATION_TIMEOUT: "INTEGRATION_TIMEOUT";
  readonly INVALID_API_KEY: "INVALID_API_KEY";
  readonly INVALID_SIGNATURE: "INVALID_SIGNATURE";
  readonly MISSING_AUTHENTICATION_TOKEN: "MISSING_AUTHENTICATION_TOKEN";
  readonly QUOTA_EXCEEDED: "QUOTA_EXCEEDED";
  readonly REQUEST_TOO_LARGE: "REQUEST_TOO_LARGE";
  readonly RESOURCE_NOT_FOUND: "RESOURCE_NOT_FOUND";
  readonly THROTTLED: "THROTTLED";
  readonly UNAUTHORIZED: "UNAUTHORIZED";
  readonly UNSUPPORTED_MEDIA_TYPE: "UNSUPPORTED_MEDIA_TYPE";
  readonly WAF_FILTERED: "WAF_FILTERED";
};
export type GatewayResponseType =
  (typeof GatewayResponseType)[keyof typeof GatewayResponseType];
export interface DeleteGatewayResponseRequest {
  restApiId: string | undefined;
  responseType: GatewayResponseType | undefined;
}
export interface DeleteIntegrationRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
}
export interface DeleteIntegrationResponseRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
  statusCode: string | undefined;
}
export interface DeleteMethodRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
}
export interface DeleteMethodResponseRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
  statusCode: string | undefined;
}
export interface DeleteModelRequest {
  restApiId: string | undefined;
  modelName: string | undefined;
}
export interface DeleteRequestValidatorRequest {
  restApiId: string | undefined;
  requestValidatorId: string | undefined;
}
export interface DeleteResourceRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
}
export interface DeleteRestApiRequest {
  restApiId: string | undefined;
}
export interface DeleteStageRequest {
  restApiId: string | undefined;
  stageName: string | undefined;
}
export interface DeleteUsagePlanRequest {
  usagePlanId: string | undefined;
}
export interface DeleteUsagePlanKeyRequest {
  usagePlanId: string | undefined;
  keyId: string | undefined;
}
export interface DeleteVpcLinkRequest {
  vpcLinkId: string | undefined;
}
export interface FlushStageAuthorizersCacheRequest {
  restApiId: string | undefined;
  stageName: string | undefined;
}
export interface FlushStageCacheRequest {
  restApiId: string | undefined;
  stageName: string | undefined;
}
export interface ClientCertificate {
  clientCertificateId?: string;
  description?: string;
  pemEncodedCertificate?: string;
  createdDate?: Date;
  expirationDate?: Date;
  tags?: Record<string, string>;
}
export interface GenerateClientCertificateRequest {
  description?: string;
  tags?: Record<string, string>;
}
export interface GetAccountRequest {}
export interface GetApiKeyRequest {
  apiKey: string | undefined;
  includeValue?: boolean;
}
export interface GetApiKeysRequest {
  position?: string;
  limit?: number;
  nameQuery?: string;
  customerId?: string;
  includeValues?: boolean;
}
export interface GetAuthorizerRequest {
  restApiId: string | undefined;
  authorizerId: string | undefined;
}
export interface GetAuthorizersRequest {
  restApiId: string | undefined;
  position?: string;
  limit?: number;
}
export interface GetBasePathMappingRequest {
  domainName: string | undefined;
  basePath: string | undefined;
}
export interface BasePathMappings {
  items?: BasePathMapping[];
  position?: string;
}
export interface GetBasePathMappingsRequest {
  domainName: string | undefined;
  position?: string;
  limit?: number;
}
export interface GetClientCertificateRequest {
  clientCertificateId: string | undefined;
}
export interface ClientCertificates {
  items?: ClientCertificate[];
  position?: string;
}
export interface GetClientCertificatesRequest {
  position?: string;
  limit?: number;
}
export interface GetDeploymentRequest {
  restApiId: string | undefined;
  deploymentId: string | undefined;
  embed?: string[];
}
export interface Deployments {
  items?: Deployment[];
  position?: string;
}
export interface GetDeploymentsRequest {
  restApiId: string | undefined;
  position?: string;
  limit?: number;
}
export interface GetDocumentationPartRequest {
  restApiId: string | undefined;
  documentationPartId: string | undefined;
}
export interface DocumentationParts {
  items?: DocumentationPart[];
  position?: string;
}
export declare const LocationStatusType: {
  readonly DOCUMENTED: "DOCUMENTED";
  readonly UNDOCUMENTED: "UNDOCUMENTED";
};
export type LocationStatusType =
  (typeof LocationStatusType)[keyof typeof LocationStatusType];
export interface GetDocumentationPartsRequest {
  restApiId: string | undefined;
  type?: DocumentationPartType;
  nameQuery?: string;
  path?: string;
  position?: string;
  limit?: number;
  locationStatus?: LocationStatusType;
}
export interface GetDocumentationVersionRequest {
  restApiId: string | undefined;
  documentationVersion: string | undefined;
}
export interface DocumentationVersions {
  items?: DocumentationVersion[];
  position?: string;
}
export interface GetDocumentationVersionsRequest {
  restApiId: string | undefined;
  position?: string;
  limit?: number;
}
export interface GetDomainNameRequest {
  domainName: string | undefined;
}
export interface DomainNames {
  items?: DomainName[];
  position?: string;
}
export interface GetDomainNamesRequest {
  position?: string;
  limit?: number;
}
export interface ExportResponse {
  contentType?: string;
  contentDisposition?: string;
  body?: Uint8Array;
}
export interface GetExportRequest {
  restApiId: string | undefined;
  stageName: string | undefined;
  exportType: string | undefined;
  parameters?: Record<string, string>;
  accepts?: string;
}
export interface GatewayResponse {
  responseType?: GatewayResponseType;
  statusCode?: string;
  responseParameters?: Record<string, string>;
  responseTemplates?: Record<string, string>;
  defaultResponse?: boolean;
}
export interface GetGatewayResponseRequest {
  restApiId: string | undefined;
  responseType: GatewayResponseType | undefined;
}
export interface GatewayResponses {
  items?: GatewayResponse[];
  position?: string;
}
export interface GetGatewayResponsesRequest {
  restApiId: string | undefined;
  position?: string;
  limit?: number;
}
export interface GetIntegrationRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
}
export interface GetIntegrationResponseRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
  statusCode: string | undefined;
}
export interface GetMethodRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
}
export interface GetMethodResponseRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
  statusCode: string | undefined;
}
export interface GetModelRequest {
  restApiId: string | undefined;
  modelName: string | undefined;
  flatten?: boolean;
}
export interface GetModelsRequest {
  restApiId: string | undefined;
  position?: string;
  limit?: number;
}
export interface Models {
  items?: Model[];
  position?: string;
}
export interface GetModelTemplateRequest {
  restApiId: string | undefined;
  modelName: string | undefined;
}
export interface Template {
  value?: string;
}
export interface GetRequestValidatorRequest {
  restApiId: string | undefined;
  requestValidatorId: string | undefined;
}
export interface GetRequestValidatorsRequest {
  restApiId: string | undefined;
  position?: string;
  limit?: number;
}
export interface RequestValidators {
  items?: RequestValidator[];
  position?: string;
}
export interface GetResourceRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  embed?: string[];
}
export interface GetResourcesRequest {
  restApiId: string | undefined;
  position?: string;
  limit?: number;
  embed?: string[];
}
export interface Resources {
  items?: Resource[];
  position?: string;
}
export interface GetRestApiRequest {
  restApiId: string | undefined;
}
export interface GetRestApisRequest {
  position?: string;
  limit?: number;
}
export interface RestApis {
  items?: RestApi[];
  position?: string;
}
export interface GetSdkRequest {
  restApiId: string | undefined;
  stageName: string | undefined;
  sdkType: string | undefined;
  parameters?: Record<string, string>;
}
export interface SdkResponse {
  contentType?: string;
  contentDisposition?: string;
  body?: Uint8Array;
}
export interface GetSdkTypeRequest {
  id: string | undefined;
}
export interface SdkConfigurationProperty {
  name?: string;
  friendlyName?: string;
  description?: string;
  required?: boolean;
  defaultValue?: string;
}
export interface SdkType {
  id?: string;
  friendlyName?: string;
  description?: string;
  configurationProperties?: SdkConfigurationProperty[];
}
export interface GetSdkTypesRequest {
  position?: string;
  limit?: number;
}
export interface SdkTypes {
  items?: SdkType[];
}
export interface GetStageRequest {
  restApiId: string | undefined;
  stageName: string | undefined;
}
export interface GetStagesRequest {
  restApiId: string | undefined;
  deploymentId?: string;
}
export interface Stages {
  item?: Stage[];
}
export interface GetTagsRequest {
  resourceArn: string | undefined;
  position?: string;
  limit?: number;
}
export interface Tags {
  tags?: Record<string, string>;
}
export interface GetUsageRequest {
  usagePlanId: string | undefined;
  keyId?: string;
  startDate: string | undefined;
  endDate: string | undefined;
  position?: string;
  limit?: number;
}
export interface Usage {
  usagePlanId?: string;
  startDate?: string;
  endDate?: string;
  items?: Record<string, number[][]>;
  position?: string;
}
export interface GetUsagePlanRequest {
  usagePlanId: string | undefined;
}
export interface GetUsagePlanKeyRequest {
  usagePlanId: string | undefined;
  keyId: string | undefined;
}
export interface GetUsagePlanKeysRequest {
  usagePlanId: string | undefined;
  position?: string;
  limit?: number;
  nameQuery?: string;
}
export interface UsagePlanKeys {
  items?: UsagePlanKey[];
  position?: string;
}
export interface GetUsagePlansRequest {
  position?: string;
  keyId?: string;
  limit?: number;
}
export interface UsagePlans {
  items?: UsagePlan[];
  position?: string;
}
export interface GetVpcLinkRequest {
  vpcLinkId: string | undefined;
}
export interface GetVpcLinksRequest {
  position?: string;
  limit?: number;
}
export interface VpcLinks {
  items?: VpcLink[];
  position?: string;
}
export interface ImportApiKeysRequest {
  body: Uint8Array | undefined;
  format: ApiKeysFormat | undefined;
  failOnWarnings?: boolean;
}
export interface DocumentationPartIds {
  ids?: string[];
  warnings?: string[];
}
export declare const PutMode: {
  readonly Merge: "merge";
  readonly Overwrite: "overwrite";
};
export type PutMode = (typeof PutMode)[keyof typeof PutMode];
export interface ImportDocumentationPartsRequest {
  restApiId: string | undefined;
  mode?: PutMode;
  failOnWarnings?: boolean;
  body: Uint8Array | undefined;
}
export interface ImportRestApiRequest {
  failOnWarnings?: boolean;
  parameters?: Record<string, string>;
  body: Uint8Array | undefined;
}
export interface PutGatewayResponseRequest {
  restApiId: string | undefined;
  responseType: GatewayResponseType | undefined;
  statusCode?: string;
  responseParameters?: Record<string, string>;
  responseTemplates?: Record<string, string>;
}
export interface PutIntegrationRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
  type: IntegrationType | undefined;
  integrationHttpMethod?: string;
  uri?: string;
  connectionType?: ConnectionType;
  connectionId?: string;
  credentials?: string;
  requestParameters?: Record<string, string>;
  requestTemplates?: Record<string, string>;
  passthroughBehavior?: string;
  cacheNamespace?: string;
  cacheKeyParameters?: string[];
  contentHandling?: ContentHandlingStrategy;
  timeoutInMillis?: number;
  tlsConfig?: TlsConfig;
}
export interface PutIntegrationResponseRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
  statusCode: string | undefined;
  selectionPattern?: string;
  responseParameters?: Record<string, string>;
  responseTemplates?: Record<string, string>;
  contentHandling?: ContentHandlingStrategy;
}
export interface PutMethodRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
  authorizationType: string | undefined;
  authorizerId?: string;
  apiKeyRequired?: boolean;
  operationName?: string;
  requestParameters?: Record<string, boolean>;
  requestModels?: Record<string, string>;
  requestValidatorId?: string;
  authorizationScopes?: string[];
}
export interface PutMethodResponseRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
  statusCode: string | undefined;
  responseParameters?: Record<string, boolean>;
  responseModels?: Record<string, string>;
}
export interface PutRestApiRequest {
  restApiId: string | undefined;
  mode?: PutMode;
  failOnWarnings?: boolean;
  parameters?: Record<string, string>;
  body: Uint8Array | undefined;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TestInvokeAuthorizerRequest {
  restApiId: string | undefined;
  authorizerId: string | undefined;
  headers?: Record<string, string>;
  multiValueHeaders?: Record<string, string[]>;
  pathWithQueryString?: string;
  body?: string;
  stageVariables?: Record<string, string>;
  additionalContext?: Record<string, string>;
}
export interface TestInvokeAuthorizerResponse {
  clientStatus?: number;
  log?: string;
  latency?: number;
  principalId?: string;
  policy?: string;
  authorization?: Record<string, string[]>;
  claims?: Record<string, string>;
}
export interface TestInvokeMethodRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
  pathWithQueryString?: string;
  body?: string;
  headers?: Record<string, string>;
  multiValueHeaders?: Record<string, string[]>;
  clientCertificateId?: string;
  stageVariables?: Record<string, string>;
}
export interface TestInvokeMethodResponse {
  status?: number;
  body?: string;
  headers?: Record<string, string>;
  multiValueHeaders?: Record<string, string[]>;
  log?: string;
  latency?: number;
}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export declare const Op: {
  readonly add: "add";
  readonly copy: "copy";
  readonly move: "move";
  readonly remove: "remove";
  readonly replace: "replace";
  readonly test: "test";
};
export type Op = (typeof Op)[keyof typeof Op];
export interface PatchOperation {
  op?: Op;
  path?: string;
  value?: string;
  from?: string;
}
export interface UpdateAccountRequest {
  patchOperations?: PatchOperation[];
}
export interface UpdateApiKeyRequest {
  apiKey: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateAuthorizerRequest {
  restApiId: string | undefined;
  authorizerId: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateBasePathMappingRequest {
  domainName: string | undefined;
  basePath: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateClientCertificateRequest {
  clientCertificateId: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateDeploymentRequest {
  restApiId: string | undefined;
  deploymentId: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateDocumentationPartRequest {
  restApiId: string | undefined;
  documentationPartId: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateDocumentationVersionRequest {
  restApiId: string | undefined;
  documentationVersion: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateDomainNameRequest {
  domainName: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateGatewayResponseRequest {
  restApiId: string | undefined;
  responseType: GatewayResponseType | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateIntegrationRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateIntegrationResponseRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
  statusCode: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateMethodRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateMethodResponseRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
  statusCode: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateModelRequest {
  restApiId: string | undefined;
  modelName: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateRequestValidatorRequest {
  restApiId: string | undefined;
  requestValidatorId: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateResourceRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateRestApiRequest {
  restApiId: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateStageRequest {
  restApiId: string | undefined;
  stageName: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateUsageRequest {
  usagePlanId: string | undefined;
  keyId: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateUsagePlanRequest {
  usagePlanId: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateVpcLinkRequest {
  vpcLinkId: string | undefined;
  patchOperations?: PatchOperation[];
}
